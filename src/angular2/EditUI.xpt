«IMPORT wcprofile»


«EXTENSION template::GeneratorExtensions»
«EXTENSION template::webExtensions»
«EXTENSION template::associationExtensions»

«DEFINE Root FOR wcprofile::Entity»
	 «setAsCurrentEntity(this)-»
	 «EXPAND genEditContainer FOR this»
	 «REM»«EXPAND genEditComponent FOR this»«ENDREM»
«ENDDEFINE»

«DEFINE genEditContainer FOR wcprofile::Entity»
«FILE getWebPath() +"/" +name+ "DetailComponent." + "html"»
 
<div *ngIf="«asVar()»">
  <h2>«name» details!</h2>
  <md-card>

    <form (ngSubmit)="save()" autocomplete="off"  #theForm="ngForm">
    	«EXPAND genAttributes FOR this»

      	«EXPAND genEditableTable FOREACH getMineAndParentsAttributes().select(a|a.isMVComposite()) -»      	
      	«EXPAND genButtons FOR this»
    </form>
  </md-card>

</div>
«ENDFILE»
«ENDDEFINE»


«DEFINE genAttributes FOR wcprofile::AbstractEntity»
	«EXPAND genPropertyRec FOREACH getMineAndParentsAttributes().select(a|!a.isMultivalued() && a.isAttributeEditable() ) -»
«ENDDEFINE»


«DEFINE genPropertyRec FOR uml::Property-»
	«IF isExpandableAssoc() -» 
		«setCurrentEmbeddable()-» 
		«EXPAND genPropertyRec FOREACH type.getAllAttributes().select(a|!a.isMultivalued() && !a.isSecret()  ) -»
		«clearCurrentEmbeddable()-»
	«ELSE-»
		«EXPAND genProperty-»
	«ENDIF»
«ENDDEFINE»


«DEFINE genProperty FOR uml::Property-»
 «EXPAND genInputBegin FOR this-»
 «EXPAND genLabel FOR this-»
 «IF association != null -»«EXPAND genAssocValue FOR this»«ELSE»«EXPAND genPropertyInput(type) FOR this»«ENDIF»
 «EXPAND genMessage FOR this-»
 «EXPAND genInputEnd FOR this-»
«ENDDEFINE»


«DEFINE genPropertyInput(uml::PrimitiveType type) FOR uml::Property»
		
	«IF isFile()»
		<h2>TODO </h2>
	«ELSEIF isDate()»
      <input type="text" class="form-control"  uib-datepicker-popup="dd/MM/yyyy" [(ngModel)]="«genPropertyLabel()»"
  		ng-required="true" close-text="Close" /> 
	«ELSEIF isBoolean()»
        <input radio id="«getId()»" name="«getId()»" type="text" class="form-control" maxlength="50" [(ngModel)]="«genPropertyLabel()»"
                    ng-minlength="2" ng-maxlength="50"/>		
	«ELSEIF isCurrency()»
		<input id="«getId()»" name="«getId()»" type="text" class="form-control" maxlength="50" [(ngModel)]="«genPropertyLabel()»"
                    ng-minlength="2" ng-maxlength="50"/>
	«ELSEIF isDouble()»
		<md-input id="«getId()»" name="«getId()»" type="text" class="form-control" maxlength="50" [(ngModel)]="«genPropertyLabel()»"
                    ng-minlength="2" ng-maxlength="50" />
	«ELSEIF isLargeText()»
		<textarea  id="«getId()»" name="«getId()»" [(ngModel)]="«genPropertyLabel()»"></textarea>
 	«ELSE»
 		 <md-input type="text"  required [(ngModel)]="«genPropertyLabel()»" ngControl="«name»"  #name="ngForm"></md-input>
	«ENDIF»
«ENDDEFINE»

«DEFINE genPropertyInput(uml::Enumeration enm) FOR uml::Property-»
 <select class="form-control" name="«getId()»" [(ngModel)]="«genPropertyLabel()»"  ng-required="«getRequired()»">
     <option value="">--Select--</option>
     «FOREACH  enm.ownedLiteral AS e-»
     <option value="«e.name»" ng-selected="{{'«e.name»' == vm.«genPropertyLabel()»}}">«e.name»</option>
     «ENDFOREACH»
 </select>
«ENDDEFINE»


«DEFINE genAssocValue FOR uml::Property»    
    <select class="form-control" required  [ngModel]="«class.asVar()»?.id" (ngModelChange)="on«name.toFirstUpper()»Changed($event,i)">
       <option>Please Select </option>
       <option *ngFor="let p of «name.getPlural()»" [value]="p.id" >{{p.displayName}}</option>
    </select>
«ENDDEFINE»



«DEFINE genLabel FOR uml::Property»
«IF !isCurrentMultiMode()»
	 <label for="«getId()»">«name.getVariableNameForDisplay()»</label>
«ENDIF»
«ENDDEFINE»

«DEFINE genMessage FOR uml::Property»
«ENDDEFINE»


«DEFINE genInputBegin FOR uml::Property»
«ENDDEFINE»

«DEFINE genInputEnd FOR uml::Property»
«ENDDEFINE»


«DEFINE genEditableTable FOR uml::Property-»
	<ul>
	«setCurrentMultiMode(true)-»
	«IF !isPreloadedComposition() -» «EXPAND genNewButton FOR this» «ENDIF»
	<li *ngFor=" let «type.asVar()» of «class.asVar()».«name»; let i = index">
		<«type.asVar()»-detail [«type.asVar()»]="«name»"></«type.asVar()»-detail>
		«IF !isPreloadedComposition()»
		  «EXPAND genNewButton -»
		  «EXPAND genDelete  -»
		«ENDIF»  
     </li>
	«setCurrentMultiMode(false)-»
	</ul>
«ENDDEFINE»

«DEFINE genNewButton FOR uml::Property»
	<button (click)="add«name.toFirstUpper()»()">Add</button>
«ENDDEFINE»

«DEFINE genDelete FOR uml::Property»
	<button (click)="remove«name.toFirstUpper()»(i)">Remove</button>
«ENDDEFINE»


«DEFINE genButtons FOR wcprofile::Entity»
	<button type="submit" class="btn btn-default" [disabled]="!theForm.form.valid">Submit</button>
«ENDDEFINE»
