«IMPORT wcprofile»


«EXTENSION template::GeneratorExtensions»
«EXTENSION template::djangoExtensions»
«EXTENSION template::associationExtensions»

«DEFINE genSerializers FOR wcprofile::EntitiesPackage»
 «FILE  name + "/" +  "serializers.py"»
from rest_framework import serializers
from .models import *
    
    «EXPAND genLookupSerializer FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
    «EXPAND genSerializer FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
    «EXPAND genWriteSerializer FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
    «EXPAND genFullSerializer FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
    
  «ENDFILE»
       
«ENDDEFINE»

«DEFINE genLookupSerializer FOR wcprofile::Entity»
class «name»LookupSerializer(serializers.ModelSerializer):
    
    displayName = serializers.ReadOnlyField()

    class Meta:
        model = «name»
        fields = ('displayName', 'id',)
«ENDDEFINE»


«DEFINE genFullSerializer FOR wcprofile::Entity»
class Full«name»Serializer(«name»Serializer):

 «FOREACH getNonComposedManyAssociations() AS a»
    «a.name» = «a.type.name»Serializer(many=True, read_only=True)
 «ENDFOREACH»
    
    class Meta(«name»Serializer.Meta):
        model = «name»
«ENDDEFINE»


«DEFINE genWriteSerializer FOR wcprofile::Entity»
    
class «name»WritableSerializer(serializers.ModelSerializer):
    
    displayName = serializers.ReadOnlyField()
    
    «IF !getAllComposed().isEmpty»
    
    def create(self, validated_data):
        «REM»TODO : will work only on one composed association«ENDREM»
        «asVar()» = «name».objects.create(**validated_data)
        
        «FOREACH getAllComposed() AS e»
        «e.name» = validated_data.pop('«asVar()»')
        for item in «e.name»:
            «e.type.name».objects.create(«e.opposite.name»=«asVar()», **item)
        «ENDFOREACH»
        return «asVar()»

    def update(self, instance, validated_data):
        «FOREACH getAllComposed() AS e»
        «e.type.name».objects.filter(«e.opposite.name»=instance).delete()
        «e.name» = validated_data.pop('«e.name»')
        for item in «e.name»:
            «e.type.name».objects.create(«e.opposite.name»=instance, **item)
        «ENDFOREACH»
        return super(«name»WritableSerializer, self).update( instance, validated_data)
     «ENDIF»

    class Meta:
        model = «name»
    
«ENDDEFINE»

«DEFINE genSerializer FOR wcprofile::Entity»

class «name»Serializer(serializers.ModelSerializer):
    displayName = serializers.ReadOnlyField()
    
 «FOREACH getOutgoingAssociations() AS e-»
    «e.name» = «e.type.name»LookupSerializer
 «ENDFOREACH-»
  
 «FOREACH getAllComposed() AS a-»
    «a.name» = «a.type.name»Serializer(many=True)
 «ENDFOREACH-»
    
    class Meta:
        model = «name»
«ENDDEFINE»

«DEFINE orgSrlizr FOR Type»
class «name»Serializer(serializers.HyperlinkedModelSerializer):
    displayName = serializers.ReadOnlyField()

    class Meta:
        model = «name»
        depth = 1
        
class «name»LookupSerializer(serializers.HyperlinkedModelSerializer):
    
    displayName = serializers.ReadOnlyField()
    
    class Meta:
        model = «name»
        fields = ('displayName', 'url', )  
«ENDDEFINE»