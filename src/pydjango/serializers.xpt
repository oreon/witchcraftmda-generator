«IMPORT wcprofile»

«EXTENSION pydjango::djangoExtensions»
«EXTENSION template::GeneratorExtensions»

«EXTENSION template::associationExtensions»

«DEFINE genSerializers FOR wcprofile::EntitiesPackage»
 «FILE  name + "/" +  "serializers.py"»
from rest_framework import serializers
from .models import *

import sys

from django.db import transaction

    «EXPAND genImports FOREACH allOwnedElements().typeSelect(wcprofile::Entity)-»
    «EXPAND genLookupSerializer FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»    
    «EXPAND genSerializer FOREACH allOwnedElements().typeSelect(wcprofile::Entity).select(a|a.getCompositionParent() == null)»
    «EXPAND genWriteSerializer FOREACH allOwnedElements().typeSelect(wcprofile::Entity).select(a|a.getCompositionParent() == null)»
    «EXPAND genFullSerializer FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
    
  «ENDFILE»
       
«ENDDEFINE»

«DEFINE genImports FOR wcprofile::Entity-»
    «FOREACH getOutgoingAssociations() AS e -»
«IF e.type.package != package -»from  «e.type.package.name».serializers import  «e.type.name»LookupSerializer«ENDIF»
    «ENDFOREACH» 
«ENDDEFINE»

«DEFINE genLookupSerializer FOR wcprofile::Entity»
class «name»LookupSerializer(serializers.ModelSerializer):
    
    displayName = serializers.ReadOnlyField()

    class Meta:
        model = «name»
        fields = ('displayName', 'id',)
«ENDDEFINE»


«DEFINE genFullSerializer FOR wcprofile::Entity»
class Full«name»Serializer(«name»Serializer):

 «FOREACH getNonComposedManyAssociations() AS a»
    «a.name» = «a.type.name»Serializer(many=True, read_only=True)
 «ENDFOREACH»
    
    class Meta(«name»Serializer.Meta):
        model = «name»
«ENDDEFINE»

«DEFINE genSerializer FOR wcprofile::Entity»
    «FOREACH getAllComposed() AS e»
        «EXPAND genSerializer FOR e.type»
    «ENDFOREACH»
    «EXPAND genSerializerImpl FOR this»
«ENDDEFINE»

«DEFINE genSerializerImpl FOR wcprofile::Entity»

class «name»Serializer(serializers.ModelSerializer):
    displayName = serializers.ReadOnlyField()
    
 «FOREACH getOutgoingAssociations() AS e-»
    «e.name» = «e.type.name»LookupSerializer()
 «ENDFOREACH-»
  
 «FOREACH getAllComposed() AS a-»
    «a.name» = «a.type.name»Serializer(many=True, read_only = True)
 «ENDFOREACH-»
    
    class Meta:
        model = «name»
«ENDDEFINE»


«DEFINE genWriteSerializer FOR wcprofile::Entity»
    «FOREACH getAllComposed() AS e»
        «EXPAND genWriteSerializer FOR e.type»
    «ENDFOREACH»
    «EXPAND genWriteSerializerImpl FOR this»
«ENDDEFINE»


«DEFINE genWriteSerializerImpl FOR wcprofile::Entity»
    
class «name»WritableSerializer(serializers.ModelSerializer):
    
    displayName = serializers.ReadOnlyField()
    
    «FOREACH getOutgoingAssociations() AS e-»
    «e.name»_displayName = serializers.ReadOnlyField(source='«e.name»DisplayName')
    «ENDFOREACH»
    
    «FOREACH getAllComposed() AS e»
    «e.name» = «e.type.name»WritableSerializer(many=True)
    «ENDFOREACH»
    
    «IF !getAllComposed().isEmpty»
    
    @transaction.atomic
    def create(self, validated_data):
        try:
            «FOREACH getAllComposed() AS e»
            «e.name»Current = validated_data.pop('«e.name»')   
            «ENDFOREACH»
            
            «asVar()» = «name».objects.create(**validated_data)
            
            «FOREACH getAllComposed() AS e»
            for item in «e.name»Current:
                «e.type.name»(«asVar()»=«asVar()», **item).save()    
            «ENDFOREACH»
            return «asVar()»
        except :
            e = sys.exc_info()[0]

    @transaction.atomic
    def update(self, instance, validated_data):
        try:
            «FOREACH getAllComposed() AS e»
            self.update«e.name.toFirstUpper()»(instance, validated_data)    
            «ENDFOREACH»
            return super(«name»WritableSerializer, self).update( instance, validated_data)
        except :
            e = sys.exc_info()[0]
    
    «FOREACH getAllComposed() AS e»
    def update«e.name.toFirstUpper()»(self, instance , validated_data):
        if not '«e.name»' in validated_data.keys() : return;
    
        «e.name»Current = validated_data.pop('«e.name»')
            
        ids = [item['id'] for item in «e.name»Current  if 'id' in item.keys() ]
        
        for item in instance.«e.name».all() :
            if item.id not in ids: 
                item.delete()
        
        for item in «e.name»Current:
            «e.type.name»(«asVar()»=instance, **item).save()  
     «ENDFOREACH»
     «ENDIF»

    class Meta:
        model = «name»
        «IF getCompositionParent() != null»exclude = ('«getCompositionParent().name»',)«ENDIF»
    
«ENDDEFINE»



«DEFINE orgSrlizr FOR Type»
class «name»Serializer(serializers.HyperlinkedModelSerializer):
    displayName = serializers.ReadOnlyField()

    class Meta:
        model = «name»
        depth = 1
        
class «name»LookupSerializer(serializers.HyperlinkedModelSerializer):
    
    displayName = serializers.ReadOnlyField()
    
    class Meta:
        model = «name»
        fields = ('displayName', 'url', )  
«ENDDEFINE»