«IMPORT wcprofile»


«EXTENSION template::GeneratorExtensions»
«EXTENSION template::djangoExtensions»
«EXTENSION template::associationExtensions»

«DEFINE Root FOR uml::Model»
	«EXPAND PackageRoot FOREACH allOwnedElements().typeSelect(uml::Package)»
«ENDDEFINE»

«DEFINE PackageRoot FOR uml::Package»
	«IF !excludeFromGeneration()»
		«EXPAND PackageGen FOREACH  allOwnedElements().typeSelect(uml::Package)»
		«REM»comment
		«EXPAND GenPackageInfo FOR this»
		«EXPAND ClassRoot FOREACH allOwnedElements().typeSelect(uml::Class)»
		«EXPAND ClassRoot FOREACH allOwnedElements().typeSelect(uml::Interface)»
		«ENDREM»
		«EXPAND EnumGen FOREACH allOwnedElements().typeSelect(uml::Enumeration)»
		
	«ENDIF»
«ENDDEFINE»


«DEFINE PackageGen FOR uml::Package»
////
«ENDDEFINE»


«DEFINE PackageGen FOR wcprofile::EntitiesPackage»
	
  «FILE name + "/" +   "modelsBase.py"»
from django.db import models
	«EXPAND EntityGen FOREACH allOwnedElements().typeSelect(wcprofile::AbstractEntity)»
  «ENDFILE»

  «FILE  name + "/" +   "models.py"»
    from django.db import models
    from .modelsBase import *
	«EXPAND genClassManual FOREACH allOwnedElements().typeSelect(wcprofile::AbstractEntity)»
  «ENDFILE»
  
  
  «FILE  name + "/" +  "serializers.py"»
    from rest_framework import serializers
    from .models import *
    
    «EXPAND genLookupSerializer FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
    
	«EXPAND genSerializer FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
	
	«EXPAND genWriteSerializer FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
	
	«EXPAND genFullSerializer FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
	
  «ENDFILE»
  
  «FILE  name + "/" +  "views.py"»
    from rest_framework import serializers
    from .serializers import *
	«EXPAND genViewSet FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
  «ENDFILE»
       
«ENDDEFINE»



«DEFINE EnumGen FOR uml::Enumeration»
	
«ENDDEFINE»

«DEFINE EntityGen FOR wcprofile::MappedSuperClass»
 «EXPAND genClass FOR this»
«ENDDEFINE»


«DEFINE EntityGen FOR wcprofile::Entity»
 «EXPAND genClass FOR this»
«ENDDEFINE»

«DEFINE EntityGen FOR wcprofile::Embeddable»
 «EXPAND genClass FOR this»
«ENDDEFINE»

«DEFINE EntityGen FOR uml::Class»
 	 «EXPAND genClass FOR this»
«ENDDEFINE»


«DEFINE genClass FOR wcprofile::AbstractEntity»

class «name»(«getParentDj()-»): 

 «FOREACH getAllAttributes() AS e-»
	«IF e.association != null && e.isNavigable()-»
		«IF e.isMultivalued()-»
			«IF e.opposite != null && e.opposite.isMultivalued()-»
    «e.name» =	ManyToManyField(targetEntity="«e.type.name»") «e.type.name-»
			«ENDIF»
		«ELSE-»
    «e.name» = models.ForeignKey(«e.type.name», related_name='«e.opposite.name-»')
		«ENDIF»
	«ELSE-»
    «e.name» = models.«getModelFieldType(e)-»(null = False, blank = True, «IF getModelFieldType(e) == "CharField"» max_length=30«ENDIF»)
	«ENDIF»
 «ENDFOREACH»
 
 	«IF isAbstract || isEmbeddable() »
    class Meta:
        abstract = True
	«ENDIF»
     
«ENDDEFINE»


«DEFINE genClassManual FOR wcprofile::AbstractEntity»

class «name»(«name»Base): 
	
	«IF isAbstract»
		class Meta:
			abstract = True
	«ELSE»
		pass
	«ENDIF»

«ENDDEFINE»

«DEFINE genLookupSerializer FOR wcprofile::Entity»
class «name»LookupSerializer(serializers.ModelSerializer):
    
    displayName = serializers.ReadOnlyField()

    class Meta:
        model = «name»
    	fields = ('displayName', 'id', )
«ENDDEFINE»

«DEFINE genFullSerializer FOR wcprofile::Entity»
class Full«name»Serializer(«name»Serializer):

 «FOREACH getNonComposedManyAssociations() AS a»
    «a.name» = «a.type.name»Serializer(many=True, read_only=True)
 «ENDFOREACH»
    
    class Meta(«name»Serializer.Meta):
        model = «name»
«ENDDEFINE»


«DEFINE genWriteSerializer FOR Type»
	
class «name»WritableSerializer(serializers.ModelSerializer):
    
    displayName = serializers.ReadOnlyField()
    
    «IF !getAllComposed().isEmpty»
    
    def create(self, validated_data):
    	«REM»will work only on one composed association«ENDREM»
    	«asVar()» = validated_data.pop('«asVar()»')
    	«FOREACH getAllComposed() AS e»
        
        «e.opposite.name» = «name».objects.create(**validated_data)
        for oi in «e.name»:
            «e.type.name».objects.create(«e.opposite.name»=«asVar()», **oi)
        «ENDFOREACH»
        return «asVar()»

    
    def update(self, instance, validated_data):
    	«FOREACH getAllComposed() AS e»
    	«e.type.name».objects.filter(«e.opposite.name»=instance).delete()
        «e.name» = validated_data.pop('«e.name»')
        for item in «e.name»:
            «e.type.name».objects.create(«e.opposite.name»=instance, **item)
        «ENDFOREACH»
       
        return super(«name»WritableSerializer, self).update( instance, validated_data)
        
     «ENDIF»

    class Meta:
        model = «name»
	
«ENDDEFINE»

«DEFINE genSerializer FOR wcprofile::Entity»

class «name»Serializer(serializers.ModelSerializer):
 «FOREACH getOutgoingAssociations() AS e»
	«e.name» = «e.type.name»LookupSerializer
 «ENDFOREACH»

	displayName = serializers.ReadOnlyField()
    
 «FOREACH getAllComposed() AS a»
    «a.name» = «a.type.name»Serializer(many=True)
 «ENDFOREACH»
    
    class Meta:
        model = «name»
«ENDDEFINE»


«DEFINE genViewSet FOR wcprofile::Entity»
class «name»ViewSet(viewsets.ModelViewSet):
    queryset = «name».objects.all()
    serializer_class = «name»Serializer
    
class «name»LookupViewSet(viewsets.ModelViewSet):
    queryset = «name».objects.all()
    serializer_class = «name»LookupSerializer
    
class «name»CompleteViewSet(«name»ViewSet):
    serializer_class = Full«name»Serializer
    
class «name»WritableViewSet(«name»ViewSet):
    serializer_class = «name»WritableSerializer    
«ENDDEFINE»


«DEFINE orgSrlizr FOR Type»
class «name»Serializer(serializers.HyperlinkedModelSerializer):
	displayName = serializers.ReadOnlyField()

    class Meta:
        model = «name»
        depth = 1
        
class «name»LookupSerializer(serializers.HyperlinkedModelSerializer):
    
    displayName = serializers.ReadOnlyField()
    
    class Meta:
        model = «name»
        fields = ('displayName', 'url', )  
«ENDDEFINE»




