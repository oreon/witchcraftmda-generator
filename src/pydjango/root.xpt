«IMPORT wcprofile»

«EXTENSION pydjango::djangoExtensions»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::associationExtensions»


«DEFINE Root FOR uml::Model»
    «EXPAND PackageRoot FOREACH allOwnedElements().typeSelect(uml::Package)»
    «EXPAND springdatarest::apicsv::Root FOR this»
«ENDDEFINE»

«DEFINE PackageRoot FOR uml::Package»
    «IF !excludeFromGeneration()»
        «EXPAND PackageGen FOREACH  allOwnedElements().typeSelect(uml::Package)»
        «REM»comment
        «EXPAND GenPackageInfo FOR this»
        «EXPAND ClassRoot FOREACH allOwnedElements().typeSelect(uml::Class)»
        «EXPAND ClassRoot FOREACH allOwnedElements().typeSelect(uml::Interface)»
        «ENDREM»
       
        
    «ENDIF»
«ENDDEFINE»


«DEFINE PackageGen FOR uml::Package»
////
«ENDDEFINE»


«DEFINE PackageGen FOR wcprofile::EntitiesPackage»
    
  «EXPAND genModels FOR this»
  «EXPAND genViewSets FOR this»
  «EXPAND serializers::genSerializers FOR this»
  «EXPAND admin::gen FOR this»
  «EXPAND tests::gen FOR this»
  «EXPAND genRoutes FOR this»
  
«ENDDEFINE»  
 
 
«DEFINE genModels FOR wcprofile::EntitiesPackage»
      «FILE name + "/" +   "modelsBase.py"»
from django.db import models

    «EXPAND EnumGen FOREACH allOwnedElements().typeSelect(uml::Enumeration)-»

    «EXPAND EntityGen FOREACH allOwnedElements().typeSelect(wcprofile::AbstractEntity).select(a|a.isAbstract)-»
    «EXPAND EntityGen FOREACH allOwnedElements().typeSelect(wcprofile::AbstractEntity).select(a|!a.isAbstract)-»   
  «ENDFILE»

  «FILE  name + "/" +   "models.py"»
from django.db import models
from .modelsBase import *
    «EXPAND genClassManual FOREACH allOwnedElements().typeSelect(wcprofile::AbstractEntity)»
  «ENDFILE»
 «ENDDEFINE»




«DEFINE genViewSets FOR wcprofile::EntitiesPackage»
  «FILE  name + "/" +  "views.py"»
from rest_framework import viewsets
from .serializers import *
    «EXPAND genViewSet FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
  «ENDFILE»
«ENDDEFINE»

«DEFINE EnumGen FOR uml::Enumeration»
«name» = (
«FOREACH ownedLiteral AS e  ITERATOR iter-»
    ('«iter.counter1 - 1»', '«e.name»'),
«ENDFOREACH»  
)
«ENDDEFINE»

«DEFINE EntityGen FOR wcprofile::MappedSuperClass»
 «EXPAND genClass FOR this»
«ENDDEFINE»


«DEFINE EntityGen FOR wcprofile::Entity»
 «EXPAND genClass FOR this»
«ENDDEFINE»

«DEFINE EntityGen FOR wcprofile::Embeddable»
 «EXPAND genClass FOR this»
«ENDDEFINE»

«DEFINE EntityGen FOR uml::Class»
  «EXPAND genClass FOR this»
«ENDDEFINE»


«DEFINE genClass FOR wcprofile::AbstractEntity»

class «name»Base(«getParentDj()-»): 

 «FOREACH getAllAttributes() AS e-»
    «IF e.association != null && e.isNavigable()-»
        «IF e.isMultivalued()-»
            «IF e.opposite != null && e.opposite.isMultivalued()-»
    «e.name» =    models.ManyToManyField("«e.type.package.name».«e.type.name»",  blank=True,  related_name="«e.name»")
            «ENDIF»
        «ELSEIF !e.opposite.isMultivalued()»
    «e.name» =    models.OneToOneField("«e.type.package.name».«e.type.name»",  blank=True,  related_name="«e.name»")
        «ELSE-»
    «e.name» = models.ForeignKey('«e.type.package.name».«e.type.name»', related_name='«e.opposite.name-»')
        «ENDIF»
    «ELSE-»
    «e.name» = models.«getModelFieldType(e)-»(null = False, blank =  «getFieldBlankable(e)», «getFieldExtension(e)»)
    «ENDIF»
 «ENDFOREACH»
    @property   
    def displayName(self):
        return self.__str__()
        
    «FOREACH getOutgoingAssociations() AS e-»
    @property   
    def «e.name»DisplayName(self):
        return self.«e.name».__str__()
     «ENDFOREACH-»
    
    
    def __str__(self):
        return «getDisplayName()» 
        
    class Meta:
        abstract = True
        
    «IF uniqueConstraints != null»
        unique_together = «uniqueConstraints»
    «ELSE»
      «IF getCompositionParent() != null && findUniqueChildProperty() != null»
        unique_together = ("«getCompositionParent().name»", "«findUniqueChildProperty().name»")
      «ENDIF»
    «ENDIF»    
«ENDDEFINE»


«DEFINE genClassManual FOR wcprofile::AbstractEntity»
class «name»(«name»Base): 
    «IF isAbstract-»
    class Meta:
        abstract = True
    «ELSE-»
        pass
    «ENDIF»
«ENDDEFINE»



«DEFINE genViewSet FOR wcprofile::Entity»
class «name»ViewSet(viewsets.ModelViewSet):
    queryset = «name».objects.all()
    serializer_class = «name»Serializer
    
class «name»LookupViewSet(viewsets.ModelViewSet):
    queryset = «name».objects.all()
    serializer_class = «name»LookupSerializer
    
class «name»CompleteViewSet(«name»ViewSet):
    serializer_class = Full«name»Serializer
    
class «name»WritableViewSet(«name»ViewSet):
    serializer_class = «name»WritableSerializer    
«ENDDEFINE»





«DEFINE genRoutes FOR wcprofile::EntitiesPackage»
«FILE  name + "/" +  "urls.py"»
from rest_framework import routers
from .views import *


router = routers.SimpleRouter(trailing_slash=False)

«FOREACH  allOwnedElements().typeSelect(wcprofile::Entity) AS e»  
router.register(r'«e.asVar().getPlural()»', «e.name»ViewSet)
router.register(r'«e.asVar().getPlural()»Writable', «e.name»WritableViewSet)
router.register(r'«e.asVar().getPlural()»Complete', «e.name»CompleteViewSet)
router.register(r'«e.asVar().getPlural()»Lookup', «e.name»LookupViewSet)
«ENDFOREACH»
    
«ENDFILE»
«ENDDEFINE»

