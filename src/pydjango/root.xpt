«IMPORT wcprofile»


«EXTENSION template::GeneratorExtensions»
«EXTENSION template::djangoExtensions»
«EXTENSION template::associationExtensions»

«DEFINE Root FOR uml::Model»
	«EXPAND PackageRoot FOREACH allOwnedElements().typeSelect(uml::Package)»
«ENDDEFINE»

«DEFINE PackageRoot FOR uml::Package»
	«IF !excludeFromGeneration()»
		«EXPAND PackageGen FOREACH  allOwnedElements().typeSelect(uml::Package)»
		«REM»comment
		«EXPAND GenPackageInfo FOR this»
		«EXPAND ClassRoot FOREACH allOwnedElements().typeSelect(uml::Class)»
		«EXPAND ClassRoot FOREACH allOwnedElements().typeSelect(uml::Interface)»
		«ENDREM»
		«EXPAND EnumGen FOREACH allOwnedElements().typeSelect(uml::Enumeration)»
		
	«ENDIF»
«ENDDEFINE»


«DEFINE PackageGen FOR uml::Package»
////
«ENDDEFINE»


«DEFINE PackageGen FOR wcprofile::EntitiesPackage»
	
  «EXPAND genModels FOR this»
  «EXPAND genViewSets FOR this»
  «EXPAND serializers::genSerializers FOR this»
  «EXPAND genRoutes FOR this»
  
«ENDDEFINE»  
 
 
«DEFINE genModels FOR wcprofile::EntitiesPackage»
 	 «FILE name + "/" +   "modelsBase.py"»
from django.db import models
	«EXPAND EntityGen FOREACH allOwnedElements().typeSelect(wcprofile::AbstractEntity)»
  «ENDFILE»

  «FILE  name + "/" +   "models.py"»
from django.db import models
from .modelsBase import *
	«EXPAND genClassManual FOREACH allOwnedElements().typeSelect(wcprofile::AbstractEntity)»
  «ENDFILE»
 «ENDDEFINE»



«DEFINE genViewSets FOR wcprofile::EntitiesPackage»
  «FILE  name + "/" +  "views.py"»
from rest_framework import viewsets
from .serializers import *
	«EXPAND genViewSet FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
  «ENDFILE»
«ENDDEFINE»

«DEFINE EnumGen FOR uml::Enumeration»
	
«ENDDEFINE»

«DEFINE EntityGen FOR wcprofile::MappedSuperClass»
 «EXPAND genClass FOR this»
«ENDDEFINE»


«DEFINE EntityGen FOR wcprofile::Entity»
 «EXPAND genClass FOR this»
«ENDDEFINE»

«DEFINE EntityGen FOR wcprofile::Embeddable»
 «EXPAND genClass FOR this»
«ENDDEFINE»

«DEFINE EntityGen FOR uml::Class»
 	 «EXPAND genClass FOR this»
«ENDDEFINE»


«DEFINE genClass FOR wcprofile::AbstractEntity»

class «name»Base(«getParentDj()-»): 

 «FOREACH getAllAttributes() AS e-»
	«IF e.association != null && e.isNavigable()-»
		«IF e.isMultivalued()-»
			«IF e.opposite != null && e.opposite.isMultivalued()-»
    «e.name» =	models.ManyToManyField("«e.type.name»",  blank=True,  related_name="«e.name»")
			«ENDIF»
		«ELSE-»
    «e.name» = models.ForeignKey('«e.type.name»', related_name='«e.opposite.name-»')
		«ENDIF»
	«ELSE-»
    «e.name» = models.«getModelFieldType(e)-»(null = False, blank = True, «IF getModelFieldType(e) == "CharField"» max_length=30«ENDIF»)
	«ENDIF»
 «ENDFOREACH»
 
 	«IF isAbstract || isEmbeddable() »
    class Meta:
        abstract = True
	«ENDIF»
     
«ENDDEFINE»


«DEFINE genClassManual FOR wcprofile::AbstractEntity»

class «name»(«name»Base): 
	
	«IF isAbstract»
    class Meta:
        abstract = True
	«ELSE»
        pass
	«ENDIF»

«ENDDEFINE»



«DEFINE genViewSet FOR wcprofile::Entity»
class «name»ViewSet(viewsets.ModelViewSet):
    queryset = «name».objects.all()
    serializer_class = «name»Serializer
    
class «name»LookupViewSet(viewsets.ModelViewSet):
    queryset = «name».objects.all()
    serializer_class = «name»LookupSerializer
    
class «name»CompleteViewSet(«name»ViewSet):
    serializer_class = Full«name»Serializer
    
class «name»WritableViewSet(«name»ViewSet):
    serializer_class = «name»WritableSerializer    
«ENDDEFINE»





«DEFINE genRoutes FOR wcprofile::EntitiesPackage»
«FILE  name + "/" +  "urls.py"»
from rest_framework import routers
from .views import *


router = routers.SimpleRouter(trailing_slash=False)

«FOREACH  allOwnedElements().typeSelect(wcprofile::Entity) AS e»  
router.register(r'«e.asVar().getPlural()»', «e.name»ViewSet)
router.register(r'«e.asVar().getPlural()»Writable', «e.name»WritableViewSet)
router.register(r'«e.asVar().getPlural()»Complete', «e.name»CompleteViewSet)
router.register(r'«e.asVar().getPlural()»Lookup', «e.name»LookupViewSet)
«ENDFOREACH»
	
«ENDFILE»
«ENDDEFINE»

