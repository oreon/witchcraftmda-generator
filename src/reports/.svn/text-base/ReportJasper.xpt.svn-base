«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::webExtensions»
«EXTENSION template::associationExtensions»
«EXTENSION reports::ReportExt»


«DEFINE gen FOR wcprofile::Report»
«IF !skipGenerate »

«FILE "../resources/reports/" + name + ".jrxml" -»
<?xml version="1.0"?>
<!DOCTYPE jasperReport
PUBLIC "-//JasperReports//DTD Report Design//EN"
"http://jasperreports.sourceforge.net/dtds/jasperreport.dtd">

<jasperReport name="«name»" isTitleNewPage="false" 
		 isSummaryNewPage="false"  formatFactoryClass="org.witchcraft.jasperreports.WCFormatFactory">

	<parameter name="ReportTitle" class="java.lang.String"/>
	«EXPAND paramGen FOREACH allOwnedElements().typeSelect(wcprofile::ReportParameter)»

	<queryString language="«getQueryLanguage()»">
		<![CDATA[«query»]]>
	</queryString>
	
	«EXPAND FieldDec FOREACH getAllReportFields()-»
	«FOREACH getAllAttributes().typeSelect(wcprofile::ReportGroup) AS a»
		«EXPAND FieldDec FOR a-»
	«ENDFOREACH»
	
	«FOREACH getAllAttributes().typeSelect(wcprofile::ReportGroup) AS a»
		«EXPAND GenGroupCounter FOR a -»
		 «EXPAND GenGroupSummaryVar FOR a-» 
	«ENDFOREACH»
	
	«FOREACH getAllAttributes().typeSelect(wcprofile::ReportGroup) AS a  ITERATOR iter  »
		«EXPAND GroupGen(iter.counter1) FOR a-»
	«ENDFOREACH»
	
	«resetCounter()-»
	
	«EXPAND GenTitle FOR this»
	
	<pageHeader>
		<band height="20">
			<rectangle>
				<reportElement x="0" y="5" width="«getDefaultWidth()»" height="15" forecolor="#333333" backcolor="#333333"/>
				<graphicElement/>
			</rectangle>
			«EXPAND FieldHdr FOREACH getAllReportFields()-»
			«resetCounter()-»
		</band>
	</pageHeader>
	
	<detail>
	 	<band height="30">
		«EXPAND FieldGen FOREACH getAllReportFields()-»
		«resetCounter()-»
	 	</band>
	</detail> 	
	
	<summary>
		<band height="«20 + (2 * 300) »">
			<staticText>
				<reportElement mode="Opaque" x="0" y="1" width="«getDefaultWidth()»" height="15" backcolor="#c0c0c0" />
				<box leftPadding="10" bottomBorder="1Point"/>
				<text><![CDATA[Summary]]> </text>
			</staticText>
			
			«EXPAND CrossTabGen::gen FOREACH allOwnedElements().typeSelect(wcprofile::CrossTab)»
			
			«EXPAND SummaryGen FOREACH getAllAttributes()-»
		
			«EXPAND genChart FOREACH allOwnedElements().typeSelect(wcprofile::ReportChart)»
			
		</band>
	</summary>
	
</jasperReport>
«ENDFILE»
«ENDIF»
«ENDDEFINE»  


«DEFINE paramGen FOR wcprofile::ReportParameter»
	«IF optionalExpression != null»
	 	<parameter name="«name»" class="java.lang.String"> 
    		<defaultValueExpression><![CDATA[($P{«name»} != null ?  $P{«name»} : " e.incidentType.id " )]]></defaultValueExpression>
  		</parameter>	
	«ELSE»
		<parameter name="«name»" class="«getFieldType()-»"/>
	«ENDIF»
	
«ENDDEFINE»

«REM» Generate the  field declarations «ENDREM»
«DEFINE FieldDec FOR wcprofile::ReportField-»
	<field name="«fieldExpression != null ? fieldExpression : genFieldExpr(type)-»" class="«getFieldType()-»"/>
«ENDDEFINE»

«DEFINE FieldDec FOR uml::Property-»
	<field name="«genFieldExpr(type)-»" class="«getFieldType()-»"/>
«ENDDEFINE»

«REM» Generate the displayed fields «ENDREM»
«DEFINE FieldDec FOR wcprofile::ReportGroup-»
	<field name="«genFieldExpr(type)-»" class="«getFieldType()-»"/>
«ENDDEFINE»



«DEFINE FieldGen FOR wcprofile::ReportField-»
	«IF visible»
		<textField isBlankWhenNull="true"  isStretchWithOverflow="true">
			<reportElement x="«getCounter() * getFieldWidth()»" y="0" width="«getFieldWidth()»" height="24"/>
			<textElement textAlignment="Left"/>
			<textFieldExpression class="«getFieldType()»">
				<![CDATA[$F{«fieldExpression != null ? fieldExpression :  name »}]]>
			</textFieldExpression>
		</textField>
	«ENDIF»
«ENDDEFINE»

«DEFINE FieldGen FOR uml::Property»
		<textField isBlankWhenNull="true" isStretchWithOverflow="true">
			<reportElement x="«getCounter() * getFieldWidth()»" y="0" width="«getFieldWidth()»" height="24"/>
			<textElement textAlignment="Left"/>
			<textFieldExpression class="«getFieldType()»"> 
				<![CDATA[$F{«genFieldExpr(type)-»}]]>
			</textFieldExpression>
		</textField>
«ENDDEFINE»


«REM» Generate the  field headers «ENDREM»

«DEFINE FieldHdr FOR wcprofile::ReportField-»
	«IF visible»
			<staticText>
				<reportElement mode="Opaque" x="«getCounter() * getFieldWidth()»" y="5" width="«getFieldWidth()»" height="15" forecolor="#ffffff" backcolor="#333333" />
				<textElement textAlignment="Left"/>
				<text><![CDATA[«name.toFirstUpper()»]]></text>
			</staticText>
	«ENDIF»
«ENDDEFINE»

«DEFINE FieldHdr FOR uml::Property-»
			<staticText>
				<reportElement mode="Opaque" x="«getCounter() * getFieldWidth()»" y="5" width="«getFieldWidth()»" height="15" forecolor="#ffffff" backcolor="#333333" />
				<textElement textAlignment="Left"/>
				<text><![CDATA[«name.toFirstUpper()»]]></text>
			</staticText>
«ENDDEFINE»

«DEFINE GroupGen(int index) FOR ReportGroup»
	<group name="Group«getGroupName()»" minHeightToStartNewPage="60">
		<groupExpression><![CDATA[$F{«genFieldExpr(type)»}]]></groupExpression>
		<groupHeader>
			<band height="20">
				<textField evaluationTime="Group" evaluationGroup="Group«getGroupName()»" bookmarkLevel="«index»">
					<reportElement mode="Opaque" x="«(index - 1) * 10»" y="5" width="«getDefaultWidth() - ((index - 1) * 10)»" 
						height="15" backcolor="«getGroupColor(index)»" />
					<box leftPadding="10" bottomBorder="1Point"/>
					<textFieldExpression class="java.lang.String">
						<![CDATA[String.valueOf($F{«genFieldExpr(type)»})]]>
					</textFieldExpression>
					<anchorNameExpression><![CDATA[String.valueOf($F{«genFieldExpr(type)»})]]></anchorNameExpression>
				</textField>
			</band>
		</groupHeader>
		
		<groupFooter>
			<band height="20">
				«IF summaryFields != null»
				«LET summaryFields.getAsList() AS summaryList»
				«FOREACH  summaryList AS s»
				<textField>
					<reportElement x="0" mode="Opaque"
						y="1" width="«getDefaultWidth()»" height="15" backcolor="«getGroupColor(index)»" />
					<textElement textAlignment="Right"/>
					<textFieldExpression class="java.lang.String">
						<![CDATA["«s.toFirstUpper()» For " + $F{«genFieldExpr(type)»} + " : " + $V{Group«getGroupName()»_«s == "count"?s.getCalculation().toUpperCase():s.getCalculation()»}]]>
					</textFieldExpression>
				</textField>
				«ENDFOREACH»
				«ENDLET»
				«ENDIF»
			</band>	
		</groupFooter> 
	</group>
«ENDDEFINE»

«DEFINE GroupGen FOR uml::Property-»
«ENDDEFINE»

«DEFINE GenGroupCounter FOR wcprofile::ReportGroup-»
	<variable name="Group«getGroupName()»Counter" class="java.lang.Integer" incrementType="Group" 
		incrementGroup="Group«getGroupName()»" calculation="Count">
		<variableExpression><![CDATA[Boolean.TRUE]]></variableExpression>
	</variable>
«ENDDEFINE»

«DEFINE GenGroupCounter FOR uml::Property-»
«ENDDEFINE»


«REM» for group summary variables«ENDREM»

«DEFINE GenGroupSummaryVar FOR wcprofile::ReportGroup-»
	«IF summaryFields != null»
	«FOREACH summaryFields.getAsList() AS s»
	«LET s.getCalculation() AS calc»
	«LET s.getField() AS field»
	
	
	«IF s.toUpperCase() != "COUNT"»
	<variable name="Group«getGroupName()»_«calc»" class="«class.getAttrib(s.getField()).getFieldType()-»"
		calculation="«calc.toFirstUpper()»" resetType="Group" resetGroup="Group«getGroupName()»">
		<variableExpression>
			<![CDATA[$F{«field»}]]>
		</variableExpression>
	</variable>
	
	«REM»For summary calculation «ENDREM»
	<variable name="«s»_«calc»" class="«class.getAttrib(s.getField()).getFieldType()-»"
		calculation="«calc.toFirstUpper()»" >
		<variableExpression>
			<![CDATA[$F{«s.getField()»}]]>
		</variableExpression>
	</variable>
	
	«ENDIF»
	«ENDLET»
	«ENDLET»
	«ENDFOREACH»
	«ENDIF»
«ENDDEFINE»

«DEFINE GenGroupSummaryVar FOR uml::Property-»
«ENDDEFINE»

«DEFINE SummaryGen FOR uml::Property-»
«ENDDEFINE»

«DEFINE SummaryGen FOR wcprofile::ReportGroup-»
	«IF summaryFields != null»
	«FOREACH summaryFields.getAsList() AS s»
	«IF s.toUpperCase() != "COUNT"»
			<textField>
				<reportElement x="420" y="1" width="30" height="15" />
				<textElement textAlignment="Right"/>
				<textFieldExpression class="«class.getAttrib(s.getField()).getFieldType()-»">
					<![CDATA[$V{«s + "_" +  s.getCalculation()»}]]>
				</textFieldExpression>
			</textField>
	«ELSE»	
			<textField>
				<reportElement x="460" y="1" width="30" height="15" />
				<textElement textAlignment="Right"/>
				<textFieldExpression class="java.lang.Integer"><![CDATA[$V{REPORT_COUNT}]]></textFieldExpression>
			</textField>
	 «ENDIF»	
	 «ENDFOREACH»
	 «ENDIF»
«ENDDEFINE»
		
		
«DEFINE GenTitle FOR wcprofile::Report»
	<title>
		<band height="70">
			<line>
				<reportElement x="0" y="0" width="«getDefaultWidth()»" height="1"/>
				<graphicElement/>
			</line>
			<textField>
				<reportElement x="0" y="10" width="«getDefaultWidth()»" height="30" />
				<textElement textAlignment="Center">
					<font size="13"/>
				</textElement>
				<textFieldExpression class="java.lang.String"><![CDATA[«title == null? "\"" + name + "\"" : title»]]></textFieldExpression>
			</textField>
		</band>
	</title>
«ENDDEFINE»		


«DEFINE genChart FOR ReportChart»
	«LET chartType.name.toLowerCase() AS chartTypeStr»
		«IF chartTypeStr == "pie"»
		
		<«chartTypeStr»Chart>
			<chart evaluationTime="Report">
				<reportElement x="250" y="20" width="280" height="272"/>
			</chart>
      		<pieDataset>
      			<keyExpression><![CDATA[$F{«key.trim()»}]]></keyExpression>
      			<valueExpression><![CDATA[$V{«value.trim()»}]]></valueExpression>
      			<labelExpression><![CDATA[$F{«key.trim()»}  + " - " + $V{«value.trim()»}  ]]></labelExpression>
      		</pieDataset>
      		<«chartTypeStr»Plot>
      			<plot/>
      		</«chartTypeStr»Plot>
		</«chartTypeStr»Chart>
		
		«ELSEIF chartTypeStr == "bar"»
			<barChart>
  					<chart evaluationTime="Report" >
  						<reportElement positionType="Float" x="0" y="20" width="250" height="275"/>
  						<chartTitle/>
  						<chartSubtitle/>
  						<chartLegend/>
  					</chart>
  					<categoryDataset>			
  						<categorySeries>
  							<seriesExpression><![CDATA[$F{«key.trim()»}]]></seriesExpression>
  							<categoryExpression><![CDATA[$F{«category.trim()»}]]></categoryExpression>
  							<valueExpression><![CDATA[$V{«value.trim()»}]]></valueExpression>
  						</categorySeries>
  						
  					</categoryDataset>
  					<barPlot isShowTickLabels="true" isShowTickMarks="true"  >
  						<plot />
  					</barPlot>
			</barChart>
		
		«ENDIF»
	«ENDLET»
«ENDDEFINE»