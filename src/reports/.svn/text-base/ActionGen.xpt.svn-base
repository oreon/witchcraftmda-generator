«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::webExtensions»
«EXTENSION template::associationExtensions»
«EXTENSION reports::ReportExt»

«DEFINE genReportsAction FOR wcprofile::Report»

«FILE getWebPackagePath("Action")   »
package « getWebPackageName() »;

import org.witchcraft.jasperreports.BaseReportAction;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

import org.apache.commons.beanutils.PropertyUtils;

«IF isSeam2()»
import org.jboss.seam.annotations.Name;
«ELSE»
import javax.inject.Named;
«ENDIF»



import org.witchcraft.jasperreports.BaseReportAction;

import java.util.Date;
import org.witchcraft.utils.DateUtils;



«IF hasCollections» import «fqn()»;«ENDIF»

«IF isSeam2()»
@Name("«getAction()»")
«ELSE»
@Named
«ENDIF»
public class «name»Action extends BaseReportAction {

 «FOREACH allOwnedElements().typeSelect(wcprofile::ReportParameter) AS param»
 	«param.type.fqn()» «param.name»  «IF param.defaultValue != null» =  «param.defaultValue» «ENDIF»;
 «ENDFOREACH»
 
 «FOREACH allOwnedElements().typeSelect(wcprofile::ReportParameter) AS param»
 	«EXPAND template::Root::genGetterSetter FOR param»
 «ENDFOREACH»
 
 
	@SuppressWarnings("unchecked")
	@Override
	public void updateParameters(Map map) {
		«FOREACH allOwnedElements().typeSelect(wcprofile::ReportParameter) AS param»
 			«IF param.expression != null && param.expression != "\"\"" »
 				if(«param.name» != null)
 					map.put("«param.name»", «param.name».«param.expression» + "");
 			«ELSE»
 				map.put("«param.name»", «param.name»);
 			«ENDIF»
 		«ENDFOREACH»
	}
	
	«IF hasCollections»
	@Override
	public JRBeanCollectionDataSource createBeansList() {
		
		String qry = "«query»";
		List<Object[]> results = getEntityManager().createQuery(qry).getResultList();
		List<«name»> lst«name»s = new ArrayList<«name»>();
		
		for (Object[] objects : results) {
			«name» «name» = new «name»();
			Field[] flds = «name».getClass().getDeclaredFields();
			
			for (int i = 0; i < objects.length; i++) {
				try {
					PropertyUtils.setProperty(«name», flds[i].getName(), objects[i]);
				} catch (Exception e) {
					log.warn("Error setting property " + flds[i].getName()  + " " + e.getMessage());
				} 
			}
			lst«name»s.add(«name»);
		}
		
		JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(lst«name»s);
		return jrBeanCollectionDataSource;
	}
	«ENDIF»
 
}
«ENDFILE»

«ENDDEFINE»
