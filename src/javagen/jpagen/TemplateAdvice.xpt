«IMPORT wcprofile»
«EXTENSION org::openarchitectureware::uml2::profile::profiling»

«EXTENSION template::associationExtensions»
«EXTENSION template::GeneratorExtensions»

«AROUND javagen::pojo::pojoroot::genClassAnnotations  FOR uml::Class»
	/**
	 * This file is an Entity Class generated by Witchcraftmda.
	 * DO NOT MODIFY any changes will be overwritten with the next run of the code generator.
	 */
	«EXPAND genClassAnnotations FOR this»
	«targetDef.proceed()»
	
	«REM»comment   
	«log('Invoking ' + ctx.name) -> ctx.proceed()»   
	«ENDREM»
«ENDAROUND»


«AROUND javagen::pojo::pojoroot::genImports  FOR uml::Class»
	«EXPAND genPersistenceImports FOR this»
	«targetDef.proceed()»
«ENDAROUND»


«AROUND javagen::pojo::pojoroot::genBaseClassAnnotations  FOR uml::Class»
	«EXPAND genBaseClassAnnotations FOR this»
	«EXPAND genSearchAnnotations FOR this»
	«targetDef.proceed()»
«ENDAROUND»


«AROUND javagen::pojo::pojoroot::genPropertyAnnotations FOR uml::Property»
	«EXPAND genPropertyAnnotations FOR this»
	«targetDef.proceed()»
«ENDAROUND»


«AROUND javagen::pojo::pojoroot::genAdditionalMethods  FOR uml::Class»
	«EXPAND genDisplayname FOR this»
	«EXPAND genAbbreviatedText FOREACH getAllAttributes().select(a|a.isLargeText())»
	«targetDef.proceed()»
«ENDAROUND»

«AROUND javagen::pojo::pojoroot::genNewDeclaration  FOR uml::Property»
	«EXPAND genNewDeclaration FOR this»
	«targetDef.proceed()»
«ENDAROUND»

«DEFINE genNewDeclaration FOR uml::Property»
	 
«ENDDEFINE»

«DEFINE genNewDeclaration FOR wcprofile::Embeddable»
	 = new «type.fqnForPackage(this.class)»
«ENDDEFINE»



«AROUND javagen::pojo::pojoroot::genPackageDetails FOR uml::Package»
	«EXPAND genPackageDetails FOR this»
	«targetDef.proceed()»
«ENDAROUND»


«AROUND javagen::pojo::pojoroot::initGetter FOR uml::Property»
	«EXPAND initGetter FOR this»
	«targetDef.proceed()»
«ENDAROUND»


«DEFINE initGetter FOR uml::Property»
	«IF type.isEmbeddable()»
		if(«name» == null ){
			«name» = new «type.fqn()»();
		}
	«ENDIF»
«ENDDEFINE»


«DEFINE initGetter FOR wcprofile::Embeddable»
	if(«name» == null{
		«name» = new «type.fqn()»();
	}
«ENDDEFINE»



«DEFINE genBaseClassAnnotations FOR wcprofile::AbstractEntity»
	@MappedSuperclass
«ENDDEFINE»

«DEFINE genBaseClassAnnotations FOR uml::Class»
«ENDDEFINE»

«DEFINE genClassAnnotations FOR uml::Class»
«ENDDEFINE»

«DEFINE genClassAnnotations FOR wcprofile::Entity»
	@Entity
	@Table(name="«getTableName()»")
	@Filters( {  @Filter(name = "archiveFilterDef") , 
	«IF isMultiTenanted()»  @Filter(name = "tenantFilterDef")  «ENDIF»
	})
	«IF auditable»@Audited«ENDIF»
	«EXPAND genSearchAnnotations FOR this»
«ENDDEFINE»

«DEFINE genClassAnnotations FOR wcprofile::Embeddable»
	@Embeddable
	«REM»
	«EXPAND genSearchAnnotations FOR this»
	«ENDREM»
«ENDDEFINE»


«DEFINE genClassAnnotations FOR wcprofile::MappedSuperClass»
	@MappedSuperclass
	//KKKKKKK
	«REM»comment
	«EXPAND genSearchAnnotations FOR this»
	«ENDREM»
«ENDDEFINE»


«DEFINE genSearchAnnotations FOR uml::Class»
«ENDDEFINE»

«DEFINE genSearchAnnotations FOR wcprofile::MappedSuperClass»
«ENDDEFINE»


«DEFINE genSearchAnnotations FOR wcprofile::AbstractEntity»
	//@Indexed
	//@Analyzer(definition = "entityAnalyzer")
«ENDDEFINE»


«DEFINE genPropertyAnnotations FOR wcprofile::DerivedProperty»
	@Transient
«ENDDEFINE»


«DEFINE genPropertyAnnotations FOR wcprofile::Column»
	«IF association == null»
		«EXPAND genSimplePropertyAnnotations FOR this»
	«ELSE»
		«EXPAND genAssocPropertyAnnotations FOR this»
	«ENDIF»
«ENDDEFINE»


«DEFINE genPropertyAnnotations FOR uml::Property»
	
«ENDDEFINE»


«DEFINE genSimplePropertyAnnotations FOR wcprofile::Column»
	«getNotNullAnnotations()»
	«IF validator != null »«getValidatorAnnotations()»«ENDIF»
	«getLengthAnnotations()»
	«getUniqueAnnotations()»
	«REM»«getUniqueAnnotationsProp()»«ENDREM»
	«getTransient()»
	«type.name.getTypeAnnotation()»
	«IF !isDerived()»«getColJpaAnnotations()» «ENDIF»
«ENDDEFINE»


«DEFINE genAssocPropertyAnnotations FOR wcprofile::Column»
	«IF isMultivalued()»
		«IF isManyToMany()»
			«EXPAND genManyToMany FOR this»
		«ELSE»
			@OneToMany(«IF isBidirectional()»mappedBy = "«getOppositeName() »", «ENDIF» fetch = FetchType.LAZY, cascade = CascadeType.ALL «IF isComposite()»,orphanRemoval=true«ENDIF»)
			@OrderBy(«IF isColumn() && orderBy != null» "«orderBy»" «ELSE»"id DESC"«ENDIF»)			
		«ENDIF»
	«ELSE»
		«IF type.isEmbeddable()»
		 «IF type.name != class.name && type.isEmbeddable() »  
		 	«EXPAND EmbeddedAttributes FOR this»  
		 «ENDIF»	
		«ELSE»
		 @« isOneOnOne()?"One":"Many"»ToOne(«IF isOneOnOne() && isAggregate()»mappedBy = "« class.asVar()»", «ENDIF»optional=«getAssocOptional()», fetch=FetchType.LAZY «IF isOneOnOne()», cascade = CascadeType.ALL «ENDIF» )
		 «IF !(isOneOnOne() && isAggregate())»@JoinColumn(name="«name»_id", nullable=«getAssocOptional()», updatable = true , insertable = true «REM»«getAssocUpdatable()»  comment«ENDREM») «ENDIF»
		«ENDIF»
	«ENDIF»	
«ENDDEFINE»


«DEFINE genManyToMany FOR uml::Property»
	«IF isLeadingManyToMany()»
		@ManyToMany(cascade={CascadeType.PERSIST, CascadeType.MERGE})
	    @JoinTable(
	        name="«opposite.name»_«name»",
	        joinColumns=@JoinColumn(name="«opposite.name»_ID"),
	        inverseJoinColumns=@JoinColumn(name="«name»_ID")
	    )
	«ELSE»
	   @ManyToMany(mappedBy="«opposite.name»")
	«ENDIF»
«ENDDEFINE»

«DEFINE EmbeddedAttributes FOR uml::Property»
	@Embedded
	@AttributeOverrides( {
	«FOREACH type.getAllAttributes() AS e ITERATOR iter»
		@AttributeOverride(name="«e.name»", column = @Column(name="«name»_«e.name»") ) «IF iter.counter1 < type.getAllAttributes().size » , «ENDIF»
	«ENDFOREACH»
    } )
«ENDDEFINE»


«DEFINE genPersistenceImports FOR uml::Class»
«ENDDEFINE»


«DEFINE genPersistenceImports FOR wcprofile::AbstractEntity»
	import javax.persistence.*;	
	import org.witchcraft.base.entity.FileAttachment;
	import org.witchcraft.base.entity.BaseEntity;
	import org.hibernate.annotations.Filter;
	import org.hibernate.annotations.Filters;
	
	import javax.validation.constraints.*;
	
	import java.math.BigDecimal;
	
	import org.hibernate.search.annotations.Analyzer;
	import org.hibernate.search.annotations.Indexed;
«ENDDEFINE»


«DEFINE genAdditionalMethods FOR uml::Class»  
«ENDDEFINE»


«DEFINE genDisplayname FOR uml::Class»
«ENDDEFINE»


«DEFINE genAbbreviatedText FOR uml::Property»

«ENDDEFINE»

«DEFINE genAbbreviatedText FOR wcprofile::Column»
	@Transient
	public String get«name.toFirstUpper()»Abbreviated() {
		try {
			return org.apache.commons.lang.WordUtils.abbreviate(«name»
					.trim(), 100, 200, "...");
		} catch (Exception e) {
			return «name» != null ? «name» : "";
		}
	}
«ENDDEFINE»


«DEFINE genDisplayname FOR wcprofile::AbstractEntity»
	«IF !getAllAttributes().isEmpty»
		@Transient
		//Display name
	    public String getDisplayName(){
	    	try {
				return «getDisplayName()»;
			} catch (Exception e) {
				return "Exception - " + e.getMessage();
			}
	    }
	«ENDIF»
	
	«REM»
	/** This method is used by hibernate full text search - override to add additional fields
	 * @see org.witchcraft.model.support.BaseEntity#retrieveSearchableFieldsArray()
	 */
	@Override
	public List<String> listSearchableFields() {
		List<String> listSearchableFields = new ArrayList<String>();
		listSearchableFields.addAll(super.listSearchableFields());
		«FOREACH getAllAttributes() AS e»
			«IF e.isString()» listSearchableFields.add("«e.name»"); «ENDIF»
		«ENDFOREACH»
		
		«EXPAND genEmbeddedAndAssociatedSearch FOREACH getComposed()»
		«EXPAND genEmbeddedAndAssociatedSearch FOREACH getEmbeddable()»
		return listSearchableFields;
	}
	«ENDREM»
	
«ENDDEFINE»


«DEFINE genPackageDetails FOR wcprofile::EntitiesPackage»
	@org.hibernate.annotations.FilterDefs({
	@org.hibernate.annotations.FilterDef(name = "archiveFilterDef", defaultCondition = "archived = :aArchived", parameters = @org.hibernate.annotations.ParamDef(name = "aArchived", type = "string")),
	«IF isMultiTenanted()»
		@org.hibernate.annotations.FilterDef(name="tenantFilterDef", defaultCondition="(tenant is null or tenant = 0 or tenant = :tenantId  )", parameters=@org.hibernate.annotations.ParamDef(name="tenantId", type="long"))
	«ENDIF»
	}) 
«ENDDEFINE»

«DEFINE genPackageDetails FOR uml::Package»
	
«ENDDEFINE»