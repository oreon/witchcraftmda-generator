«IMPORT wcprofile»
«EXTENSION org::openarchitectureware::uml2::profile::profiling»

«EXTENSION template::associationExtensions»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::univExtensions»


«AROUND javagen::pojo::pojoroot::genClassAnnotations  FOR uml::Class»
	/**
	 * This file is an Entity Class generated by Witchcraftmda.
	 * DO NOT MODIFY any changes will be overwritten with the next run of the code generator.
	 */
	«EXPAND genClassAnnotations FOR this»
	«targetDef.proceed()»
	
	«REM»comment   
	«log('Invoking ' + ctx.name) -> ctx.proceed()»   
	«ENDREM»
«ENDAROUND»


«AROUND javagen::pojo::pojoroot::genImports  FOR uml::Class»
	«EXPAND genPersistenceImports FOR this»
	«targetDef.proceed()»
«ENDAROUND»




«AROUND javagen::pojo::pojoroot::genBaseClassAnnotations  FOR uml::Class»
	«EXPAND genBaseClassAnnotations FOR this»
	«EXPAND genSearchAnnotations FOR this»
	«targetDef.proceed()»
«ENDAROUND»

«AROUND javagen::pojo::pojoroot::genBaseClassAnnotations  FOR uml::Class»
	«EXPAND genBaseClassAnnotations FOR this»
	«EXPAND genSearchAnnotations FOR this»
	«targetDef.proceed()»
«ENDAROUND»


«AROUND fullyQualifiedDefinionName FOR Type»
«ENDAROUND»


«AROUND javagen::pojo::pojoroot::genClassDeclaration FOR uml::Class»
	«EXPAND genClassDeclaration FOR this»
	
«ENDAROUND»


«AROUND javagen::pojo::pojoroot::genPropertyAnnotations FOR uml::Property»
	«EXPAND genPropertyAnnotations FOR this»
	«targetDef.proceed()»
«ENDAROUND»


«AROUND javagen::pojo::pojoroot::genAdditionalMethods  FOR uml::Class»
	«EXPAND genDisplayname FOR this»
	«targetDef.proceed()»
«ENDAROUND»


«AROUND javagen::jpagen::dtogen::genClassPrtName(String ext) FOR uml::Class»
	«EXPAND genClassPrtNameBase(ext) FOR this»
«ENDAROUND»


«AROUND javagen::jpagen::dtogen::genImports FOR uml::Class»
	«EXPAND genDtoImports FOR this»
«ENDAROUND»


«AROUND javagen::jpagen::dtogen::genAdditionalMethods FOR uml::Class»
	«EXPAND genAdditionalDtoMethods FOR this»
«ENDAROUND»

«AROUND javagen::pojo::pojoroot::genNewDeclaration  FOR uml::Property»
	«EXPAND genNewDeclaration FOR this»
	«targetDef.proceed()»
«ENDAROUND»

«DEFINE genNewDeclaration FOR uml::Property»
«ENDDEFINE»

«DEFINE genNewDeclaration FOR wcprofile::Embeddable»
	 = new «type.fqnForPackage(this.class)»
«ENDDEFINE»



«AROUND javagen::pojo::pojoroot::genPackageDetails FOR uml::Package»
	«EXPAND genPackageDetails FOR this»
	«targetDef.proceed()»
«ENDAROUND»


«AROUND javagen::pojo::pojoroot::initGetter FOR uml::Property»
	«EXPAND initGetter FOR this»
	«targetDef.proceed()»
«ENDAROUND»


«DEFINE initGetter FOR uml::Property»
«ENDDEFINE»

«DEFINE genClassName FOR uml::Class»
	«name»«entitySuffix()» 
«ENDDEFINE»


«DEFINE genClassPrtNameBase(String ext) FOR uml::Class»
	 «EXPAND dtogen::genClassPrtNameBase(ext) FOR this»
«ENDDEFINE»


«DEFINE genClassPrtNameBase(String ext) FOR wcprofile::Entity»
	 extends «getParentNameWithExt(ext) != "" ? getParentNameWithExt(ext) : "BaseDto<Integer>" »
«ENDDEFINE»




«DEFINE initGetter FOR wcprofile::Embeddable»
	if(«name» == null{
		«name» = new «type.fqn()»();
	}
«ENDDEFINE»

«DEFINE genClassDeclaration FOR uml::Class»
	public class «name»Base «getParent()» «getInterfaces()»
«ENDDEFINE»


«DEFINE genClassDeclaration FOR wcprofile::Entity»
	public abstract class «name»Base «getParent()»<Integer> «getInterfaces()»
«ENDDEFINE»

«DEFINE genBaseClassAnnotations FOR wcprofile::AbstractEntity»
	@MappedSuperclass
«ENDDEFINE»

«DEFINE genBaseClassAnnotations FOR uml::Class»
«ENDDEFINE»

«DEFINE genClassAnnotations FOR uml::Class»
«ENDDEFINE»

«DEFINE genClassAnnotations FOR wcprofile::Entity»
	@Entity
	@Table(name="«getTableNameUC()»")
	//@Filters( {  @Filter(name = "archiveFilterDef") 
	«IF auditable»@Audited«ENDIF»
	«EXPAND genSearchAnnotations FOR this»
«ENDDEFINE»

«DEFINE genClassAnnotations FOR wcprofile::Embeddable»
	@Embeddable
	«REM»
	«EXPAND genSearchAnnotations FOR this»
	«ENDREM»
«ENDDEFINE»


«DEFINE genClassAnnotations FOR wcprofile::MappedSuperClass»
	@MappedSuperclass
	«REM»comment
	«EXPAND genSearchAnnotations FOR this»
	«ENDREM»
«ENDDEFINE»


«DEFINE genSearchAnnotations FOR uml::Class»
«ENDDEFINE»

«DEFINE genSearchAnnotations FOR wcprofile::MappedSuperClass»
«ENDDEFINE»


«DEFINE genSearchAnnotations FOR wcprofile::AbstractEntity»
	//@Indexed
	//@Analyzer(definition = "entityAnalyzer")
«ENDDEFINE»


«DEFINE genPropertyAnnotations FOR wcprofile::DerivedProperty»
	@Transient
«ENDDEFINE»


«DEFINE genPropertyAnnotations FOR wcprofile::Column»
	«IF association == null»
		«EXPAND genSimplePropertyAnnotations FOR this»
	«ELSE»
		«EXPAND genAssocPropertyAnnotations FOR this»
	«ENDIF»
«ENDDEFINE»


«DEFINE genPropertyAnnotations FOR uml::Property»
	
«ENDDEFINE»


«DEFINE genSimplePropertyAnnotations FOR wcprofile::Column»
	 /*«getNotNullAnnotations()» */
	«IF validator != null »
	/*	«getValidatorAnnotations()» */
	«ENDIF»
	/* «getLengthAnnotations()»*/
	«getUniqueAnnotations()»
	«REM»«getUniqueAnnotationsProp()»«ENDREM»
	«getTransient()»
	«IF type.name == "MultilingualText"»
		«EXPAND MLTextGen FOR this»
	«ELSE»
		«type.name.getTypeAnnotation()»
		«IF !isDerived()»«getColJpaAnnotations()» «ENDIF»
	«ENDIF»
	
«ENDDEFINE»


«DEFINE MLTextGen FOR wcprofile::Column»
	@Embedded
    @AttributeOverrides({
        @AttributeOverride(name = FIELD_ENG, column = @Column(name = "«name.toUpperCase()»_ENG")),
        @AttributeOverride(name = FIELD_FRE, column = @Column(name = "«name.toUpperCase()»_FRE"))})
«ENDDEFINE»


«DEFINE genAssocPropertyAnnotations FOR wcprofile::Column»
	«IF isMultivalued()»
		«IF isManyToMany()»
			«EXPAND genManyToMany FOR this»
		«ELSE»
			@OneToMany(«IF isBidirectional()»mappedBy = "«getOppositeName() »", «ENDIF» fetch = FetchType.LAZY, cascade = CascadeType.ALL «REM» «IF isComposite()»,orphanRemoval=true«ENDIF» «ENDREM»)
			//@OrderBy(«IF isColumn() && orderBy != null» "«orderBy»" «ELSE»"id DESC"«ENDIF»)			
		«ENDIF»
	«ELSE»
		«IF type.isEmbeddable()»
		 «IF type.name != class.name && type.isEmbeddable() »  
		 	«EXPAND EmbeddedAttributes FOR this»  
		 «ENDIF»	
		«ELSE»
		 @« isOneOnOne()?"One":"Many"»ToOne(«IF isOneOnOne() && isAggregate()»mappedBy = "« class.asVar()»", «ENDIF»optional=«getAssocOptional()», fetch=FetchType.LAZY «IF isOneOnOne()», cascade = CascadeType.ALL «ENDIF» )
		 «IF !(isOneOnOne() && isAggregate())»@JoinColumn(name="«name.toUpperCase()»_SYSID", nullable=«getAssocOptional()», updatable = true , insertable = true «REM»«getAssocUpdatable()»  comment«ENDREM») «ENDIF»
		«ENDIF»
	«ENDIF»	
«ENDDEFINE»


«DEFINE genManyToMany FOR uml::Property»
	«IF isLeadingManyToMany()»
		@ManyToMany(cascade={CascadeType.PERSIST, CascadeType.MERGE})
	    @JoinTable(
	        name="«opposite.name»_«name»",
	        joinColumns=@JoinColumn(name="«opposite.name.toUpperCase()»_SYSID"),
	        inverseJoinColumns=@JoinColumn(name="«name.toUpperCase()»_SYSID")
	    )
	«ELSE»
	   @ManyToMany(mappedBy="«opposite.name»")
	«ENDIF»
«ENDDEFINE»

«DEFINE EmbeddedAttributes FOR uml::Property»
	«REM»@Embedded«ENDREM»
	
	@AttributeOverrides( {
	«FOREACH type.getAllAttributes() AS e ITERATOR iter»
		@AttributeOverride(name="«e.name»", column = @Column(name="«name»_«e.name»") ) «IF iter.counter1 < type.getAllAttributes().size » , «ENDIF»
	«ENDFOREACH»
    } )
    
«ENDDEFINE»


«DEFINE genPersistenceImports FOR uml::Class»
«ENDDEFINE»


«DEFINE genPersistenceImports FOR wcprofile::AbstractEntity»
	import javax.persistence.*;	
	import org.hibernate.annotations.Filter;
	import org.hibernate.annotations.Filters;
	
	import com.univeris.ewm.provider.data.basedataaccess.BaseEntity;
	
	//import javax.validation.constraints.*;
	
	import java.math.BigDecimal;
	
	//import org.hibernate.search.annotations.Analyzer;
	//import org.hibernate.search.annotations.Indexed;
	
	import static com.univeris.uifcommon.dataobjects.MultilingualText.FIELD_ENG;
	import static com.univeris.uifcommon.dataobjects.MultilingualText.FIELD_FRE;
	
	
	import com.univeris.uifcommon.dataobjects.MultilingualText;
«ENDDEFINE»


«DEFINE genAdditionalMethods FOR uml::Class»  
	«EXPAND genDisplayname FOR this»
	
«ENDDEFINE»


«DEFINE genDisplayname FOR uml::Class»

«ENDDEFINE»


«DEFINE genDisplayname FOR wcprofile::AbstractEntity»
	«IF !getAllAttributes().isEmpty»
		@Transient
	    public String getDisplayName(){
	    	try {
				return «getDisplayName()»;
			} catch (Exception e) {
				return "Exception - " + e.getMessage();
			}
	    }
	«ENDIF»
	
	
	
	«EXPAND genId FOR this»
	
	«REM»
	/** This method is used by hibernate full text search - override to add additional fields
	 * @see org.witchcraft.model.support.BaseEntity#retrieveSearchableFieldsArray()
	 */
	@Override
	public List<String> listSearchableFields() {
		List<String> listSearchableFields = new ArrayList<String>();
		listSearchableFields.addAll(super.listSearchableFields());
		«FOREACH getAllAttributes() AS e»
			«IF e.isString()» listSearchableFields.add("«e.name»"); «ENDIF»
		«ENDFOREACH»
		
		«EXPAND genEmbeddedAndAssociatedSearch FOREACH getComposed()»
		«EXPAND genEmbeddedAndAssociatedSearch FOREACH getEmbeddable()»
		return listSearchableFields;
	}
	«ENDREM»
	
«ENDDEFINE»


«DEFINE genId FOR wcprofile::AbstractEntity»
«ENDDEFINE»

«DEFINE genId FOR wcprofile::Entity»
	@Id
    @GeneratedValue
    @Column(name = "ID", nullable = false)
    private Integer _id;
    
    @Override
    public void setPK(final Integer id) {
        setId(id);
    }
    
    
    @Override
    public Integer getPK() {
        return getId();  
    }
    
     public Integer getId() {
        return _id;
    }

    public void setId(Integer id) {
        _id = id;
    }
«ENDDEFINE»


«DEFINE genPackageDetails FOR wcprofile::EntitiesPackage»
	@org.hibernate.annotations.FilterDefs({
	@org.hibernate.annotations.FilterDef(name = "archiveFilterDef", defaultCondition = "archived = :aArchived", parameters = @org.hibernate.annotations.ParamDef(name = "aArchived", type = "string")),
	«IF isMultiTenanted()»
		@org.hibernate.annotations.FilterDef(name="tenantFilterDef", defaultCondition="(tenant is null or tenant = 0 or tenant = :tenantId  )", parameters=@org.hibernate.annotations.ParamDef(name="tenantId", type="long"))
	«ENDIF»
	}) 
«ENDDEFINE»

«DEFINE genPackageDetails FOR uml::Package»
	
«ENDDEFINE»



«DEFINE genDtoImports FOR uml::Class»
	import java.util.ArrayList;
	import java.util.List;
	import java.util.List;
	import java.util.Date;

	import com.univeris.ewm.dataobjects.support.BaseDto;
	import com.univeris.uifcommon.dataobjects.MultilingualText;
	
	import java.math.BigDecimal;
«ENDDEFINE»

«DEFINE genAdditionalDtoMethods FOR uml::Class»

«ENDDEFINE»


«DEFINE genAdditionalDtoMethods FOR wcprofile::AbstractEntity»

	 «EXPAND genMultiLang FOREACH  getAllAttributes().select( e | e.type.name == "MultilingualText")»
	
«ENDDEFINE»


«DEFINE genMultiLang FOR uml::Property»

	public String get«name.toFirstUpper()»English() {
        return «name» == null ? "" : «name».getText(MultilingualText.LANG_CD_ENG);
    }

    public void set«name.toFirstUpper()»English(final String nameEnglish) {
        if («name» == null) {
            «name» = new MultilingualText();
        }

        «name».addText(MultilingualText.LANG_CD_ENG, nameEnglish);
    }
    
    public String get«name.toFirstUpper()»French() {
        return «name» == null ? "" : «name».getText(MultilingualText.LANG_CD_FRE);
    }

    public void set«name.toFirstUpper()»French(final String nameFrench) {
        if («name» == null) {
            «name» = new MultilingualText();
        }

        «name».addText(MultilingualText.LANG_CD_FRE, nameFrench);
    }

«ENDDEFINE»