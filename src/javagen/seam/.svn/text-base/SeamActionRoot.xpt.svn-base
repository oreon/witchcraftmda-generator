«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::associationExtensions»

«EXTENSION template::WebExtensions»


«DEFINE Root FOR uml::Model»
	«EXPAND PackageRoot FOREACH allOwnedElements().typeSelect(uml::Package)»
	«EXPAND SeamEntityQueryRoot::Root FOR this»
«ENDDEFINE»

«DEFINE PackageRoot FOR uml::Package»
	«EXPAND BaseGen FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
	«EXPAND BaseGen FOREACH allOwnedElements().typeSelect(wcprofile::MappedSuperClass)»
	«EXPAND ManualGen FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
«ENDDEFINE»
	

«DEFINE ManualGen FOR wcprofile::Entity»

	«FILE getWebPackagePath("Action")  man_path »
	
		package « getWebPackageName() »;
			
		«EXPAND genImports FOR this»	
		//@Scope(ScopeType.CONVERSATION)
		@Name("«asVar()»Action")
		public class «name»Action extends «name»ActionBase implements java.io.Serializable{
			
		}
	«ENDFILE»

«ENDDEFINE»

«DEFINE BaseGen FOR wcprofile::MappedSuperClass»
	«EXPAND AbstractGen FOR this»
«ENDDEFINE»

«DEFINE BaseGen FOR wcprofile::Entity»
	«IF isAbstract»
		«EXPAND AbstractGen FOR this»
	«ENDIF»
	«EXPAND BaseGenImpl FOR this»
«ENDDEFINE»


«DEFINE AbstractGen FOR uml::Class»
	«FILE getWebPackagePathWithPrefix("Abstract" , "Action")  man_path »
		
		package « getWebPackageName() »;
		
		«EXPAND genImports FOR this»	
		
		
		public  abstract class Abstract«name»Action<T extends «fqn()»> extends BaseAction<T> implements java.io.Serializable{
			
		}
	«ENDFILE»
«ENDDEFINE»


«DEFINE BaseGenImpl FOR wcprofile::Entity»
«FILE getWebPackagePath("ActionBase")   »
package « getWebPackageName() »;

import « packageName() ».«name»;

import org.witchcraft.seam.action.BaseAction; 

«EXPAND genImports FOR this»
«FOREACH getMultiValued() AS a-»
import «a.type.fqn()»;
«ENDFOREACH»


//«REM»comment«implClassSuffix()»«ENDREM»
public abstract class «name»ActionBase extends «getParentForAction()» implements java.io.Serializable{
	
	@RequestParameter
	protected Long «asVar()»Id;
	
	
	«IF getAppliedStereotype("wcprofile::SystemUser") != null && defaultRole != null»
		public static final String DEFAULT_ROLE_NAME = "«defaultRole»"; 
	«ENDIF»
	
	public void set«name»Id(Long id) {
		setEntityId(id);
	}
	
	
	/** for modal dlg we need to load associaitons regardless of postback
	 * @param id
	 */
	public void set«name»IdForModalDlg(Long id) {
		setEntityIdForModalDlg(id);
	}
	
	
	«IF isAbstract»
		@Override
		public Class<«name»> getEntityClass() {
			return «name».class;
		}
	«ENDIF»
	
	public Long get«name»Id() {
		return (Long) getId();
	}
	

	public «name» get«name»(){
		return getEntity();
	}
	
	
	@Override
	@Restrict("#{s:hasPermission('«asVar()»', 'edit')}")
	public String save(boolean endconv) {
		return super.save(endconv);
	}
	
	
	@Override
	@Restrict("#{s:hasPermission('«asVar()»', 'delete')}")
	public void archiveById() {
		super.archiveById();
	}
	
	«IF ! isAbstract»
	@Override
	protected «name» createInstance() {
		«name» instance =  super.createInstance();
		
		«FOREACH allParents() AS e-»
				«EXPAND genCurrentUser FOREACH e.getAllAttributes().select(a|a.currentUser()) -»
		«ENDFOREACH»
		«EXPAND genCurrentUser FOREACH getAllAttributes().select(a|a.currentUser()) -»
		
		 return instance;
	}
	
	
	/**
	 * Adds the contained associations that should be available for a newly created object e.g. 
	 * An order should always have at least one order item . Marked in uml with 1..* multiplicity
	 */
	private void addDefaultAssociations() {
		if(isNew()){
			instance = getInstance();
			«FOREACH getComposed() AS e-»
				«IF e.getLower() > 0  »
				 if( instance.get«e.name.toFirstUpper()»().isEmpty() ){
					for(int i = 0; i < «e.getLower()» ; i++){
						«e.type.fqn()» item = new «e.type.fqn()»();
						item.set«e.opposite.name.toFirstUpper()»(getInstance());
						getList«e.name.toFirstUpper()»().add(item);
					}
				}
				«ENDIF»
			«ENDFOREACH»
		}
	}

	public void wire() {
		/*
		if (isNew()){
			getInstance();
			«FOREACH getOutgoingAssociations() AS e-»
				 «IF !e.type.isAbstract»
					«e.type.fqn()» «e.name» = «e.name»Action.getInstance();
					if («e.name» != null  ) {
						 getInstance().set«e.name.toFirstUpper()»(«e.name»);
					}
				 «ENDIF»
			«ENDFOREACH»
		}
		*/
	}

	public «name» getDefinedInstance() {
		return («name») (isIdDefined() ? getInstance() : null);
	}
	

	public void set«name»(«name» t) {
		setEntity(t);
	}
	
	@Override
	public Class<«name»> getEntityClass() {
		return «name».class;
	}

	
	«EXPAND template::Root::genUnqNamedQryOp  FOREACH getAllAttributes()»
	
	
	«IF treeFlds != null»
		public List<«name»> getTopLevel«getTreeParent().toFirstUpper()»(){
			return  getEntityManager().createQuery("select e from «name» e where e.«getTreeParent()» is null").getResultList();
		}
	«ENDIF»
	
	«EXPAND genFile FOR this»
	
	
	
	«IF !getOutgoingAssociations().isEmpty»
	/** This function adds associated entities to an example criterion
	 * @see org.witchcraft.model.support.dao.BaseAction#createExampleCriteria(java.lang.Object)
	 */
	 @Override
	public void addAssociations(Criteria criteria) {
		«FOREACH getOutgoingAssociations() AS e»
		if (instance.get«e.name.toFirstUpper()»() != null) {
			criteria = criteria.add(Restrictions.eq("«e.name».id", instance.get«e.name.toFirstUpper()»().getId()));
		}
		«ENDFOREACH»
	}
	«ENDIF»
	
	
	
	«EXPAND genCompositeCode FOREACH getMultiValued() -»
	«EXPAND genManyToMany FOREACH getLeadingManyToMany() -»

	«EXPAND template::Root::genOperation FOREACH getAllOperations()»
	
	
	«REM» Generate methods  for  «ENDREM»
	«FOREACH getModel().allOwnedElements().typeSelect(uml::Class).select(a | a.name == ( this.name + "Action") ) AS a»
		«EXPAND template::Root::genOperation FOREACH a.getAllOperations()»
	«ENDFOREACH»
	
	«REM»system user«ENDREM»
	«IF getAppliedStereotype("wcprofile::SystemUser") != null»
		
		«IF defaultRole != null»
		public String getDefaultRoleName(){
			return DEFAULT_ROLE_NAME;
		}
		«ENDIF»
	«ENDIF»
	
	public String view«name»(){
		load(currentEntityId);
		return "view«name»";
	}


 «ENDIF»
	
}
«ENDFILE»
«ENDDEFINE»

«DEFINE genCurrentUser FOR wcprofile::Column»
	instance.set«name.toFirstUpper()»(«name»Action.getCurrentLoggedIn«type.name»());
«ENDDEFINE»

«DEFINE genFile FOR uml::Class»

«FOREACH getAllAttributes().select ( e | e.isFile() ) AS e»	
	public String download«e.name.toFirstUpper()»(Long id) {
		if(id == null || id == 0)
            id = currentEntityId;
		setId(id);
		downloadAttachment(getInstance().get«e.name.toFirstUpper()»());
		return "success";
	}
	
	
	
	«IF isRich()»
		public void «e.name»UploadListener(FileUploadEvent event) throws Exception {
		UploadedFile uploadItem = event.getUploadedFile();
		if (getInstance().get«e.name.toFirstUpper()»() == null)
			getInstance().set«e.name.toFirstUpper()»(new FileAttachment());
		getInstance().get«e.name.toFirstUpper()»().setFileName(uploadItem.getName());
		getInstance().get«e.name.toFirstUpper()»().setContentType(uploadItem.getContentType());
		getInstance().get«e.name.toFirstUpper()»().setData((uploadItem.getData()));
	  }
	«ELSEIF isJsf2Rich()»
		public void «e.name»UploadListener(UploadEvent event) throws Exception {
		  UploadItem uploadItem = event.getUploadItem();
		  if(getInstance().get«e.name.toFirstUpper()»() == null )
			getInstance().set«e.name.toFirstUpper()»(new FileAttachment());
		  getInstance().get«e.name.toFirstUpper()»().setFileName(uploadItem.getFileName());
		  getInstance().get«e.name.toFirstUpper()»().setContentType(uploadItem.getContentType());
		  getInstance().get«e.name.toFirstUpper()»().setData(FileUtils.readFileToByteArray( uploadItem.getFile() )); 
	  }
	 «ELSEIF isPrimeSeam2()»
	 
		 public void «e.name»UploadListener(org.primefaces.event.FileUploadEvent  event) {  
			org.primefaces.model.UploadedFile uploadItem = event.getFile();
			if (getInstance().get«e.name.toFirstUpper()»() == null)
				getInstance().set«e.name.toFirstUpper()»(new FileAttachment());
			getInstance().get«e.name.toFirstUpper()»().setFileName(uploadItem.getFileName());
			getInstance().get«e.name.toFirstUpper()»().setContentType(uploadItem.getContentType());
			getInstance().get«e.name.toFirstUpper()»().setData((uploadItem.getContents())); 
	    }  
		 
	  «ELSE»
	  //todo 
	«ENDIF»
	
	«ENDFOREACH»
«ENDDEFINE»


«DEFINE updateList FOR uml::Property»
	  if (list«name.toFirstUpper()» != null) {
		getInstance().get«name.toFirstUpper()»().clear();
		getInstance().get«name.toFirstUpper()»().addAll(list«name.toFirstUpper()»);
	  }
«ENDDEFINE»


«DEFINE updateListManyToMany FOR uml::Property»
	«IF isPrimeSeam2()»
		
	  «IF isLeadingManyToManyAutoComplete()»
	  if(list«name.toFirstUpper()» != null){
	  	getInstance().get«name.toFirstUpper()»().clear();
		getInstance().get«name.toFirstUpper()»().addAll(list«name.toFirstUpper()»);
	  }
	  «ELSE»
	  if (listAvailable«name.toFirstUpper()» != null) {
			getInstance().get«name.toFirstUpper()»().clear();
			getInstance().get«name.toFirstUpper()»().addAll(listAvailable«name.toFirstUpper()».getTarget());
	   }
	  «ENDIF»
	  
	«ELSE»
	«REM»todo for jsf 2 and jsf 1.2 with richfacse«ENDREM»
	if (list«name.toFirstUpper()» != null) {
		getInstance().get«name.toFirstUpper()»().clear();
		getInstance().get«name.toFirstUpper()»().addAll(list«name.toFirstUpper()».getTarget());
	}
	«ENDIF»
«ENDDEFINE»


«DEFINE genManyToMany FOR uml::Property»
	«EXPAND genList( "") FOR this»
	«EXPAND genList( "Available") FOR this»
«ENDDEFINE»



«DEFINE genCompositeCode FOR uml::Property»
	
	«EXPAND genList("") FOR this»
	
	@Begin(join=true, flushMode= org.jboss.seam.annotations.FlushModeType.MANUAL)
	public void delete«name.toFirstUpper()»(int index){
		getList«name.toFirstUpper()»().remove(index);
	}
	
	@Begin(join = true, flushMode =  org.jboss.seam.annotations.FlushModeType.MANUAL)
	public void add«name.toFirstUpper()»(){
		getInstance().add«name.toFirstUpper().getSingular()»(new «type.fqn()»());
	}
«ENDDEFINE»

«DEFINE genList(String prefix) FOR uml::Property»
	
	«LET "list" + prefix + name.toFirstUpper()  AS currentList»
	
	«IF isLeadingManyToMany() && prefix == "Available"» «REM»for many to many«ENDREM»
	
		protected DualListModel<«type.fqn()»> «currentList» ;
		
		«REM»TODO This method will not work if there is more than one many to many 
		@Override
		public void setEntityId(Long entityId) {
			super.setEntityId(entityId);
			init«currentList.toFirstUpper()»();
		}
		«ENDREM»
		
		protected void init«currentList.toFirstUpper()»(){
			
			List<«type.fqn()»> available«name» = getSourceList«name.toFirstUpper()»();
				
			List<«type.fqn()»> current«name.toFirstUpper()» = getInstance().get«name.toFirstUpper()»();
			
			if (available«name» == null)
				available«name» = new ArrayList<«type.fqn()»>();
			
			if (getEntity() != null)
				available«name».removeAll(getEntity().get«name.toFirstUpper()»());
		
			«currentList» = new DualListModel<«type.fqn()»>( available«name», current«name.toFirstUpper()» );
		}
		
		public DualListModel<«type.fqn()»> fetch«currentList.toFirstUpper()»() {
			return get«currentList.toFirstUpper()»();
		}
		
		public DualListModel<«type.fqn()»> get«currentList.toFirstUpper()»() {
			if («currentList» == null)
				init«currentList.toFirstUpper()»();
			
			return «currentList»;
		}
		
	
		public void set«currentList.toFirstUpper()»(DualListModel<«type.fqn()»> «currentList») {
			this.«currentList» = «currentList»;
			getInstance().set«name.toFirstUpper()»(«currentList».getTarget());
		}
		
		public List<«type.fqn()»> getSourceList«name.toFirstUpper()»() {
		
			return ((«type.getListFqn()»)Component.getInstance ("«type.asVar()»List")).fetchAll();
		}
	
	«ELSE»
		public List<«type.fqn()»> get«currentList.toFirstUpper()»() {
			return getInstance().get«name.toFirstUpper()»();
		}
		
		//public void prePopulate«currentList.toFirstUpper()»() {}
	
		public void set«currentList.toFirstUpper()»(List<«type.fqn()»> «currentList») {
			//this.«currentList» = «currentList»;
		}
	
	
	
		«REM»comment
		protected List<«type.fqn()»> «currentList» = new ArrayList<«type.fqn()»>();
		
		void init«currentList.toFirstUpper()»(){
		
			if(«currentList».isEmpty())
				«currentList».addAll(getInstance().get«name.toFirstUpper()»());
				
		}
		
		«IF prefix == "Available"»@Begin(join=true)«ENDIF»
		
		public List<«type.fqn()»> get«currentList.toFirstUpper()»() {
			return «currentList»;
		}
		
		public void prePopulate«currentList.toFirstUpper()»() {}
	
		public void set«currentList.toFirstUpper()»(List<«type.fqn()»> «currentList») {
			this.«currentList» = «currentList»;
		}
		«ENDREM»
	«ENDIF»
	«ENDLET»
«ENDDEFINE»


«DEFINE genImports FOR uml::Class»
import java.util.ArrayList;
import java.util.List;

import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;
import javax.persistence.EntityManager;

import org.hibernate.Criteria;
import org.hibernate.criterion.Restrictions;

import org.apache.commons.lang.StringUtils;

import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.Scope;

import org.jboss.seam.annotations.Begin;
import org.jboss.seam.annotations.End;
import org.jboss.seam.annotations.Factory;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Logger;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Out;
import org.jboss.seam.Component;
import org.jboss.seam.security.Identity;

import org.jboss.seam.annotations.datamodel.DataModel;
import org.jboss.seam.annotations.datamodel.DataModelSelection;
import org.jboss.seam.faces.FacesMessages;
import org.jboss.seam.log.Log;
import org.jboss.seam.annotations.Observer;
import org.jboss.seam.annotations.security.Restrict;
import org.jboss.seam.annotations.web.RequestParameter;

import org.witchcraft.base.entity.FileAttachment;

import org.apache.commons.io.FileUtils;

«IF isRich()»
import org.richfaces.event.UploadEvent;
import org.richfaces.model.UploadItem;
«ELSEIF isPrimeSeam2()»
import org.primefaces.model.DualListModel;
«ELSE»
import org.richfaces.event.FileUploadEvent;
import org.richfaces.model.UploadedFile;
«ENDIF»

import org.witchcraft.seam.action.BaseAction; 
import org.witchcraft.base.entity.BaseEntity;




«ENDDEFINE»

