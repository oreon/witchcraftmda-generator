«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::associationExtensions»

«DEFINE Root FOR uml::Model»
	«EXPAND PackageRoot FOREACH allOwnedElements().typeSelect(uml::Package)»
	«EXPAND template::DocumentationRoot::Root FOR this»
«ENDDEFINE»

«DEFINE PackageRoot FOR uml::Package»
	
«ENDDEFINE»


«DEFINE PackageRoot FOR wcprofile::EntitiesPackage»
	«IF !excludeFromGeneration»
	«EXPAND PackageRoot FOREACH  eContents().typeSelect(uml::Package)»
	«EXPAND ClassRoot FOREACH eContents().typeSelect(uml::Class)»
	«EXPAND ClassRoot FOREACH eContents().typeSelect(uml::Interface)»
	«EXPAND EnumGen FOREACH allOwnedElements().typeSelect(uml::Enumeration)»
	«EXPAND GenPackageInfo FOR this»
	
	«ENDIF»
«ENDDEFINE»


«DEFINE genProjectUtils FOR uml::Model»

«ENDDEFINE»




«DEFINE GenPackageInfo FOR uml::Package»
«IF !name.startsWith("UML")»

«FILE packagePathPck() +"/package-info.groovy"  »
package «packageNamePck()»; 
«ENDFILE»

«ENDIF»
«ENDDEFINE»

«DEFINE GenPackageInfo FOR wcprofile::EntitiesPackage»
«FILE packagePathPck() +"/package-info.groovy"  »
«IF getCurrentCartridge() == "RICH"»
@FilterDefs({
@FilterDef(name = "archiveFilterDef", defaultCondition = "archived = :aArchived", parameters = @ParamDef(name = "aArchived", type = "string")),
«IF isMultiTenanted()»
	@FilterDef(name="tenantFilterDef", defaultCondition="(tenant is null or tenant = :tenantId )", parameters=@ParamDef(name="tenantId", type="long"))
«ENDIF»
}) 
«ENDIF»
package «packageNamePck()»; 
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.ParamDef;
import org.hibernate.annotations.FilterDefs;
«ENDFILE»
«ENDDEFINE»


«DEFINE ClassRoot FOR wcprofile::AbstractEntity»
	«IF name != null && package != null»
	
	«FILE packagePath() +"/" +name+".groovy"»
		package « packageName() »;
		«EXPAND genImports FOR this»
		«EXPAND genPersistenceImports FOR this»
		«EXPAND genClassBody FOR this»
	«ENDFILE»
	
	«ENDIF»
«ENDDEFINE»





«DEFINE ClassRoot FOR uml::Interface»
	«FILE packagePath() +"/" +name+".groovy"»
	package « packageName() »;
	«EXPAND genImports »
	
	public interface «name» «parents().size > 0 ?" extends " + parents().get(0).name:""»{
		 «EXPAND genOperationDecl FOREACH getAllOperations()»
	}
	«ENDFILE»
«ENDDEFINE»



«DEFINE genClassBody FOR wcprofile::AbstractEntity»
	public class «name» «getParent()» «getInterfaces()»{
		«EXPAND genDecl FOREACH getAllAttributes() »
		«EXPAND genOperation FOREACH getAllOperations()»
	}
«ENDDEFINE»



«DEFINE genClassBodyContents FOR uml::Class»
		«EXPAND genProperty FOREACH getAllAttributes() »
		«EXPAND JavaBeansRoot::genGetterSetter FOREACH getAllAttributes() »
		«EXPAND genOperation FOREACH getAllOperations()»
«ENDDEFINE»

«DEFINE genProperty FOR uml::Property»
	«IF isMultivalued()»
		private java.util.List<«type.fqn()»> «name»   = new ArrayList<«type.fqn()»>();
	«ELSE»
		private «type.fqnForPackage(this.class)»  «name» «getDefault() != null?" = " + getDefaultVal(type):""»;
	«ENDIF»
«ENDDEFINE»


«DEFINE genClassName(boolean isAbstract) FOR uml::Class»
	public class «name» «getParent()» «getInterfaces()»
«ENDDEFINE»

«DEFINE genClassBody FOR wcprofile::Entity»
	//@Table(name="«getTableName()»")
	«IF !isAbstract »   
		«IF getCurrentCartridge() == "RICH"» @Name("«asVar()»")   «ENDIF»
		«EXPAND genIndexed»
		«IF cacheType != null »@Cache(usage = CacheConcurrencyStrategy.«cacheType.name»)«ENDIF»
	«ELSE»
		@Inheritance(strategy=InheritanceType.«inheritanceType.name»)
	«ENDIF»
	@XmlRootElement
	public  «IF isAbstract» abstract «ENDIF» class «name» «getParent()»  «getInterfaces()» «getImplementedInterfaces().isEmpty  ?" implements " : ","»  «getAuditable()?"Auditable, ":""» java.io.Serializable {
		private static final long serialVersionUID = «serialver()»;
		
		«EXPAND genDecl FOREACH getAllAttributes() »
		«EXPAND genGetterSetter FOREACH getAllAttributes() »
		
		«EXPAND genPopupAndDisplayname FOR this»
		
		«EXPAND genAbbreviatedText  FOREACH getAllAttributes()»
		
	    
	    //Empty setter , needed for richfaces autocomplete to work 
	    public void setDisplayName(String name){
	    }
	    
	    «EXPAND genSearchFieldsArray FOR this»
	   
	    
	    «IF isProcessToken()»
	    	private Long processId;

			private String processName;
		
			public Long getProcessId() {
				return processId;
			}
		
			public void setProcessId(Long processId) {
				this.processId = processId;
			}

			public String getProcessName() {
				return processName;
			}
		
			public void setProcessName(String processName) {
				this.processName = processName;
			}
	    «ENDIF»
	    «REM»comment
	    «EXPAND genOperation FOREACH getAllOperations()»
	    «ENDREM»
	}
«ENDDEFINE»


«DEFINE genPopupAndDisplayname FOR uml::Class»
	«IF !getAllAttributes().isEmpty»
	    public String toString(){
	    	try {
				return «getDisplayName()»;
			} catch (Exception e) {
				return "Exception - " + e.getMessage();
			}
	    }
	    «ENDIF»
	    
	    «IF !getAllAttributes().isEmpty && popupInfo != null»
		@Transient
	    public String getPopupInfo(){
	    	try {
				return «popupInfo»;
			} catch (Exception e) {
				return "Exception - " + e.getMessage();
			}
	    }
	    «ENDIF»
«ENDDEFINE»



«DEFINE genAbbreviatedText FOR uml::Property»
«IF this.type.name == "largeText"»
@Transient
	public String get«name.toFirstUpper()»Abbreviated() {
		try {
			return org.apache.commons.lang.WordUtils.abbreviate(«name»
					.trim(), 100, 200, "...");
		} catch (Exception e) {
			return «name» != null ? «name» : "";
		}
	}
«ENDIF»
«ENDDEFINE»



«DEFINE genSearchFieldsArray FOR uml::Class»

	
«ENDDEFINE»

«DEFINE genEmbeddedAndAssociatedSearch FOR uml::Property»
«FOREACH type.getAllAttributes() AS attr»
	«IF attr.isString()» listSearchableFields.add("«name».«attr.name»");«ENDIF»
«ENDFOREACH»
«ENDDEFINE»

«DEFINE genClassBody FOR wcprofile::Embeddable»
	@Embeddable
	«EXPAND genIndexed FOR this»
	public class «name» «getParent()» «getInterfaces()» implements  java.io.Serializable{
		private static final long serialVersionUID = «serialver()»;
		
		«EXPAND genDecl FOREACH getAllAttributes() »
		
		«EXPAND genPopupAndDisplayname FOR this»
		
		«EXPAND genAbbreviatedText  FOREACH getAllAttributes()»
	}
«ENDDEFINE»


«DEFINE genIndexed FOR wcprofile::AbstractEntity»
	
	«IF isFullTextSearchable()»
		@Indexed
		@Analyzer(definition="entityAnalyzer")
	«ENDIF»
«ENDDEFINE»


«DEFINE genClassBody FOR wcprofile::MappedSuperClass»
	@MappedSuperclass
	public class «name» «getParent()» «getInterfaces()»{
		private static final long serialVersionUID = «serialver()»;
		
		«EXPAND genDecl FOREACH getAllAttributes() »
		«EXPAND genGetterSetter FOREACH getAllAttributes() »
		
		«EXPAND genPopupAndDisplayname FOR this»
	    
	    «EXPAND genSearchFieldsArray FOR this»
	}
«ENDDEFINE»

«DEFINE genWrappedOperation FOR uml::Operation»
	/** 
	 * «getDocumentation()»
	 «FOREACH ownedParameter AS e-» 
	 	
	 «IF e.name != null && e.name != ""» @param «e.name»  «e.type.name» «e.getDocumentation()» «ENDIF» 
	 *«ENDFOREACH»
	 * @return «type.name» 
	 */
	 @Restrict("#{s:hasPermission('«class.name»','«name»')}")
	«visibility» «getOpReturnType()» «getOpReturnTypeTemplateParam()»  «name» («getParametersSignature()»){
	
		StringBuilder exceptionMessages = new StringBuilder();
		
		«EXPAND applyConstaints FOREACH ownedParameter»
	
		
		if(!StringUtils.isEmpty(exceptionMessages.toString())){
			throw new ContractViolationException(exceptionMessages.toString());
		}
		
		«IF type != null» return «ENDIF» do«name.toFirstUpper()»(«getParameters()»); 
	}
	
	/** 
	 * «ownedComment.body»
	 */
	 «IF readPropertyDef("generateAbstractMethods","true") == "true"»
	  protected  abstract «getOpReturnType()» «getOpReturnTypeTemplateParam()»  do«name.toFirstUpper()» («getParametersSignature()»);
	«ELSE» 
	protected «getOpReturnType()» «getOpReturnTypeTemplateParam()»  do«name.toFirstUpper()» («getParametersSignature()»){ 
		«IF type != null» return null; «ENDIF»
	}
	«ENDIF»
«ENDDEFINE»

«DEFINE applyConstaints FOR uml::Parameter»
	«IF getAllConstraints().size > 0»
	try{
	«FOREACH getAllConstraints() AS c»
		AssertContractCondition.enforce(«c.specification.body.get(0).replaceAll(":self",name) »,
			"«c.errorMessage != null ? c.errorMessage.replaceAll(":self",name) : "Invalid " + name»");
	«ENDFOREACH»
	}catch(ContractViolationException cve){
			exceptionMessages.append(cve.getMessage() + ";");
	}
	«ENDIF»
«ENDDEFINE»

		


«DEFINE genOperation FOR uml::Operation»
	/** 
	 * «ownedComment.body»
	 */
	«visibility» «getOpReturnType()» «getOpReturnTypeTemplateParam()»  «name» («getParametersSignature()»){ 
		«IF type != null && type.name != "void" »
			return null;
		«ENDIF»
	}
	
	«EXPAND genFunctionEnabled FOR this»
«ENDDEFINE»

«DEFINE genFunctionEnabled FOR uml::Operation»
	
«ENDDEFINE»

«DEFINE genFunctionEnabled FOR wcprofile::UserOperation»
	public boolean is«name.toFirstUpper()»Allowed(){
		return true;
	}
«ENDDEFINE»



«DEFINE genOperationDecl FOR uml::Operation»
	«visibility» «getOpReturnType()» «name» («getParametersSignature()»);
«ENDDEFINE»


«DEFINE genOperation FOR wcprofile::NamedQueryOp»
	«visibility» «getOpReturnType()» «name» («getParametersSignature()»){ 
		«IF getParameters().length > 0 »
			return execute«getQyeryTypeByReturnType()»NamedQuery("«name»", «getParameters()»);
		«ELSE»
			return execute«getQyeryTypeByReturnType()»NamedQuery("«name»");
		«ENDIF»
		
	}
«ENDDEFINE»


«DEFINE genUnqNamedQryOp FOR uml::Property»
	«IF isUnq() »
	public «class.fqn()» findByUnq«name.toFirstUpper()» («getParametersSignature()»){ 
		return executeSingleResultNamedQuery("«class.name.toFirstLower()».findByUnq«name.toFirstUpper()»", «name»);
	}
	«ENDIF»
«ENDDEFINE»



«DEFINE gen FOR uml::Generalization»
«ENDDEFINE»

«DEFINE genDecl FOR wcprofile::DerivedProperty»
	
«ENDDEFINE»

«DEFINE genDecl FOR wcprofile::DerivedFormula»
	
«ENDDEFINE»


«DEFINE genDecl FOR uml::Property»
	«IF isMultivalued()»
		«IF opposite!= null && opposite.isMultivalued() » «REM»Many to many relationship«ENDREM»
			«IF  isAggregate()»
			@ManyToMany(cascade={CascadeType.PERSIST, CascadeType.MERGE})
		    @JoinTable(
		        name="«opposite.name»_«name»",
		        joinColumns=@JoinColumn(name="«opposite.name»_ID"),
		        inverseJoinColumns=@JoinColumn(name="«name»_ID")
		    )
		    «ELSE»
		    	 @ManyToMany(mappedBy="«opposite.name»")
			«ENDIF»
		«ELSE»
		//@OneToMany(«IF isBidirectional()»mappedBy = "«getOppositeName() »", «ENDIF» fetch = FetchType.LAZY, cascade = CascadeType.ALL)
		//@JoinColumn(name = "«getOppositeName()»_ID", nullable = «getAssocOptional()»)
		 //@OrderBy(«IF isColumn() && orderBy != null» "«orderBy»" «ELSE»"id DESC"«ENDIF»)
		«IF type.name != class.name && class.isFullTextSearchable()»//@IndexedEmbedded«ENDIF»
		«ENDIF»
		static hasMany = [«name»:«type.fqnForPackage(this.class)»]
	
	«ELSE»
		«IF association != null &&  !type.isEmbeddable()»
			«REM»comment//«isOneOnOne()» unq «isUnique» opp is unq«opposite.isUnique» mult «isMultivalued()» opp mult «opposite.isMultivalued()» «opposite.isMultivalued() == null ? "unspec" : "spec-blank" » «ENDREM»
			//@« isOneOnOne()?"One":"Many"»ToOne(«IF isOneOnOne() && isAggregate()»mappedBy = "« class.asVar()»", «ENDIF»optional=«getAssocOptional()», fetch=FetchType.LAZY, cascade = CascadeType.ALL)
			«IF !(isOneOnOne() && isAggregate())»//@JoinColumn(name="«name»_id", nullable=«getAssocOptional()», updatable = «getAssocUpdatable()») «ENDIF»
    		«IF type.name != class.name  && class.isFullTextSearchable()»//@ContainedIn«ENDIF»
		«ENDIF» 
		«IF type.isEmbeddable() || isContainedAssoc() || (isColumn()  && autocomplete)»
			«IF type.name != class.name && type.isEmbeddable() »//@IndexedEmbedded «EXPAND EmbeddedAttributes FOR this»  «ENDIF»
			static belongsTo = [«name»:«type.fqnForPackage(this.class)»]
		«ELSE»
			«EXPAND genPropertyDecl FOR this»
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE EmbeddedAttributes FOR uml::Property»
	@AttributeOverrides( {
	«FOREACH type.getAllAttributes() AS e ITERATOR iter»
		@AttributeOverride(name="«e.name»", column = @Column(name="«name»_«e.name»") ) «IF iter.counter1 < type.getAllAttributes().size » , «ENDIF»
	«ENDFOREACH»
    } )
«ENDDEFINE»

«DEFINE genPropertyDecl FOR uml::Property»
	«type.name.getTypeAnnotation()»
	«IF association == null»«getUniqueAnnotationsProp()»«ENDIF»
	«EXPAND genBaseDecl FOR this»
«ENDDEFINE»

«DEFINE genBasePropertyDecl FOR uml::Property»
	protected «type.fqnForPackage(this.class)»  «name» «getDefault() != null?" = " + getDefaultVal(type):""»
«ENDDEFINE»

«DEFINE genPropertyDecl FOR wcprofile::Column»
	«getNotNullAnnotations()»
	«IF validator != null »«getValidatorAnnotations()»«ENDIF»
	«getLengthAnnotations()»
	«getUniqueAnnotations()»
	«REM»«getBoostAnnotations()»«ENDREM»
	«getTransient()»
	«type.name.getTypeAnnotation()»
	«IF !isDerived()»«getColJpaAnnotations()» «ENDIF»
	«EXPAND genBaseDecl FOR this»
«ENDDEFINE»



«DEFINE genBaseDecl FOR uml::Property»

	«IF type.name == "imageFile"»  
	@Embedded
    @AttributeOverrides( {
        @AttributeOverride(name="name", column = @Column(name="«name»_name") ),
        @AttributeOverride(name="contentType", column = @Column(name="«name»_contentType") ),
        @AttributeOverride(name="data", column = @Column(name="«name»_data", length = 4194304) )
    } )
	protected FileAttachment «name» = new FileAttachment();	
	«ELSE»
		«IF isColumn() && (  derivedProperty != null)»@Transient«ENDIF»
		«IF isString()» @Field(index = Index.« getCurrentCartridge() == "RICH" ? "TOKENIZED":"YES" »)
		@Analyzer(definition = "entityAnalyzer") «ENDIF»
		«EXPAND genBasePropertyDecl FOR this» 
			«IF isColumn() && defaultExpression != null»  
				=  «defaultExpression»  «defaultExpression.endsWith(";")?"":";"»
			«ELSE»
				;
			«ENDIF» 
	«ENDIF»
	
«ENDDEFINE»




«DEFINE genGetterSetter FOR uml::Property»
	
«ENDDEFINE»

«DEFINE genGetterSetter FOR wcprofile::DerivedProperty»
//derived property - «name»
public «type.fqnForPackage(this.class)» get«name.toFirstUpper()»( ){
	return «derivation != null ? derivation :  name»;
	return «name»;
}
«ENDDEFINE»


«DEFINE EnumGen FOR uml::Enumeration»
	«FILE packagePath() + "/"+ name +".groovy"»  
	package «packageName()»;
	
	public enum «name» {	
		
		«FOREACH  ownedLiteral AS e»
			«e.name»,
		«ENDFOREACH»
		;
		
		«name»() { }
		
		public String getName(){
        	return this.toString();
    	}
    	
    	public String getDisplayName(){
        	return this.toString();
    	}
	} 
	«ENDFILE»
«ENDDEFINE»



«DEFINE genImports FOR uml::Type»
	import java.util.ArrayList;
	import java.util.HashSet;
	import java.util.List;
	import java.util.Set;
	import java.util.Date;
	import javax.ws.rs.core.Response;
«ENDDEFINE»


«DEFINE genPersistenceImports FOR uml::Class»
	«REM» 
	import «getTopLevelPackage()».ProjectUtils;
	«ENDREM»
«ENDDEFINE»
