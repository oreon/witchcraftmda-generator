«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::webExtensions»
«EXTENSION template::associationExtensions»

«DEFINE Root FOR wcprofile::Entity»
	 «setAsCurrentEntity(this)-»
	 «EXPAND genEditContainer FOR this»
	 «EXPAND genEditComponent FOR this»
«ENDDEFINE»

«DEFINE genEditContainer FOR wcprofile::Entity»
«FILE getWebPath() +"/edit" +name+ "." + "tpl"»

<ui:composition «EXPAND ListUI::genImports FOR this»
   template="/layout/stub/clientXpress.seam">

    <!--selected script/css includes file-->
    <ui:param name="layout_jsIncludes" value="/layout/scripts/cxpImports.seam"/>
    <!--selected tab template file-->
    <ui:param name="layout_tabTemplate" value="/layout/menu/tabSelectionOperations.seam"/>
    <!--selected left nav template file-->
    <ui:param name="layout_navTemplate" value="/layout/menu/nav/operationsClientXpressProfile.seam"/>

    <ui:param name="layout_pageTitle" value="#{uvs:label('PROFILES')}"/>
    <ui:param name="step" value="library"/>

    <ui:define name="page-header">
        <ui:include src="/cxp/operations/controls/clientProfileTabs.seam"/>
    </ui:define>

    <ui:define name="page-content">
    	<ui:include src="edit«name»Component.tpl" />
    </ui:define>
</ui:composition>
«ENDFILE»
«ENDDEFINE»



«DEFINE genEditComponent FOR wcprofile::Entity»
«FILE getWebPath() +"/edit" +name+ "Component." + "tpl"»

<ui:composition xmlns="http://www.w3.org/1999/xhtml"
«EXPAND ListUI::genImports FOR this»
 >
    <h:panelGroup id="panel«name»" layout="block">
          «EXPAND genAttribAsOutput FOR this»
     </h:panelGroup>  
     «EXPAND genTable FOR this»
   
</ui:composition>
«ENDFILE»
«ENDDEFINE»


«DEFINE genAttribAsOutput FOR uml::Class-»
	«FOREACH allParents() AS e-»
	 «EXPAND genPropertyRec FOREACH e.getAllAttributes().select(a|!a.isMultivalued() && a.isAttributeEditable()  ) -»
	«ENDFOREACH»
	«EXPAND genPropertyRec FOREACH getAllAttributes().select(a|!a.isMultivalued() && a.isAttributeEditable()   ) -»
«ENDDEFINE»


«DEFINE genTable FOR uml::Class»
	«FOREACH allParents() AS e-»
		«EXPAND genEditableTable FOREACH e.getComposed() -»
	«ENDFOREACH»
	«EXPAND genEditableTable FOREACH getComposed() -»
«ENDDEFINE»

«DEFINE genPropertyRec FOR uml::Property-»
	«IF isExpandableAssoc() -» 
		«setCurrentEmbeddable()-» 
		«EXPAND genPropertyRec FOREACH type.getAllAttributes().select(a|!a.isMultivalued() && !a.isSecret()  ) -»
		«clearCurrentEmbeddable()-»
	«ELSE-»
		«EXPAND genAttribute -»
	«ENDIF»
«ENDDEFINE»

«DEFINE genAttribute FOR uml::Property -»
	«EXPAND genProperty FOR this-»
«ENDDEFINE»









«DEFINE genProperty FOR uml::Property-»

 «EXPAND genInputBegin FOR this»

 «EXPAND genLabel FOR this»

 «EXPAND genPropertyInput(type) FOR this»
 
 «EXPAND genMessage FOR this»
 
 «EXPAND genInputEnd FOR this»
 
 
«ENDDEFINE»

«DEFINE genPropertyInput(wcprofile::Column col) FOR uml::Property»
	«EXPAND genProp FOR this»
«ENDDEFINE»
 

«DEFINE genPropertyInput(uml::PrimitiveType type) FOR uml::Property»
	«EXPAND genProp FOR this»
«ENDDEFINE»

«DEFINE genProp FOR uml::Property»
		«IF association != null -»
		
		«ELSEIF isFile()»
			<h2>TODO </h2>
		«ELSEIF isDate()»
           <p:calendar id="«getId()»" value="#{«genPropertyLabel()»}" showOn="button" />
		«ELSEIF isBoolean()»
            <h:selectBooleanCheckbox id="«getId()»" value="#{«genPropertyLabel()»}" />		
		«ELSEIF isCurrency()»
			<h:outputText value="#{«prefix»«genPropertyLabel()»}">
				<f:convertNumber pattern="$#,##0.00"/>
			</h:outputText>
		«ELSEIF isDouble()»
			<h:inputText id="«getId()»"  value="#{«genPropertyLabel()»}" >
				<f:convertNumber pattern="000.00"/>
			</h:inputText>
		«ELSEIF isLargeText()»
			<h:inputTextarea id="«getId()»" value="#{«genPropertyLabel()»}" cols="55" rows="5" maxlength="800" />
	 	«ELSE»
            <h:inputText id="«getId()»"  value="#{«genPropertyLabel()»}" />
		«ENDIF»
«ENDDEFINE»



«DEFINE genPropertyInput(uml::Enumeration enm) FOR uml::Property-»
	<h:selectOneMenu id="«getId()»"  value="#{«getActionForMode()»«genPropertyLabel()»}" required="«getRequired()»" 
	  label="«msgBundleKey()»">
		<f:selectItem itemLabel="Please Select..." itemValue="" />
		«FOREACH  enm.ownedLiteral AS e-»
		<f:selectItem itemValue="«e.name»"  itemLabel="#{msg.«e.name-»}" />
		«ENDFOREACH»
	</h:selectOneMenu>
«ENDDEFINE»

«DEFINE genPropertyInput(wcprofile::Entity entity) FOR uml::Property»
	<h:selectOneMenu id="«getId()»" value="#{«genPropertyLabel()-»}" required="«!getAssocOptional()»">
		<s:selectItems value="#{«type.asVar()»List}" var="itemIter"
			label="#{itemIter.displayName}"
			noSelectionLabel="Please Select..." />
		<s:convertEntity />
	</h:selectOneMenu>
«ENDDEFINE»





«DEFINE genLabel FOR uml::Property»
«IF !isCurrentMultiMode()»
	<h:outputText value="#{uvs:label('«getId().toUpperCase()»')}" />
«ENDIF»
«ENDDEFINE»

«DEFINE genMessage FOR uml::Property»
	 <h:message for="«getId()»"/>
«ENDDEFINE»


«DEFINE genInputBegin FOR uml::Property»
	«IF isCurrentMultiMode()»
		<rich:column >
			<f:facet name="header"> «getOutputMessage()» </f:facet>
	«ENDIF»
	 
«ENDDEFINE»


«DEFINE genInputEnd FOR uml::Property»
	 «IF isCurrentMultiMode()»
		</rich:column >
	«ENDIF»
«ENDDEFINE»





«DEFINE genEditableTable FOR uml::Property-»
	«IF !isPreloadedComposition() -» «EXPAND genNewButton FOR this» «ENDIF»
	«setCurrentMultiMode(true)-»
	<rich:dataTable id="«name»" var="«type.asVar()»" rendered="#{«genEditPermission()»}"
				value="#{«class.getAction()».list«name.toFirstUpper()»}" 
				rowKeyVar="rowIndex" 
				rowClasses="odd, even" styleClass="viewInfo" rules="all">
		«setAsCurrentEntity(type)»
		«EXPAND genAttribAsOutput FOR type-»
		
		 «IF !isPreloadedComposition()»
		  «EXPAND genNew -»
		  «EXPAND genDelete FOR this -»
		 «ENDIF»
	</rich:dataTable>
	«setCurrentMultiMode(false)-»
«ENDDEFINE»


«DEFINE genNew FOR uml::Property»
	<h:column>
		«EXPAND genNewButton FOR this»
	</h:column>
«ENDDEFINE»

«DEFINE genNewButton FOR uml::Property»
	<a:commandButton  value="New «name.toFirstUpper().getSingular()»" action="#{«class.getAction()».add«name.toFirstUpper()»}"  
		reRender="«name», «class.getComponentPanelId(true)»"  rendered="#{«genEditPermission()»}" >
		<s:conversationId/>
	</a:commandButton>
«ENDDEFINE»

«DEFINE genDelete FOR uml::Property»
	<h:column>
		<h:commandButton value="Delete" immediate="true" action="#{«class.getAction()».delete«name.toFirstUpper()»(rowIndex)}"  
			reRender="«name»"
			>
			<s:conversationId/>
		</h:commandButton>
	</h:column>
«ENDDEFINE»
