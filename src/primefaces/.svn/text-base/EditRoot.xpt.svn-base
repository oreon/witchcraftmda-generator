«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::webExtensions»
«EXTENSION template::associationExtensions»


«DEFINE genEdit FOR uml::Class»
	«clearCurrentEmbeddable()-»
	«setCurrentEditMode(true)» 
	«EXPAND genEditFile»
	«EXPAND genEditComponent»
«ENDDEFINE»

«DEFINE genEditFile FOR uml::Class»

«FILE getWebPath() +"/" + "edit" + name+ "." + getExtension()»
<ui:composition «EXPAND WebRoot::genIncludes-»
	template = "«getAdminTemplate()»" >	
	

	<f:metadata>
		<f:viewParam name="id" value="#{«getAction()».id}"/>
		<f:event type="preRenderView" listener="#{«getAction()».retrieve}"/>
	</f:metadata>
	
	<ui:define name="content">
		<h:form>
		«REM»«IF templatable && !isCurrentTemplateMode() »«EXPAND genTemplateChooser FOR this»«ENDIF»
		
		«IF isCurrentTemplateMode()»
		 <s:decorate id="templateNameDecorate" template="/layout/edit.xhtml"> 
          <ui:define name="label"> 
            <h:outputText value="#{msg.templateName}  " rendered="#{skipPermissionCheck == 'true' || s:hasPermission('prescription', 'notesEdit')}"/>
          </ui:define>  
          <h:inputText label="#{msg.templateName}"  value="#{«getAction()».templateName}" required="true"   /> 
        </s:decorate>
		«ENDIF»  «ENDREM»
	
		<ui:include src = "«getComponentViewFile(customViewComponents ?"customEdit":"edit")»" />
		«EXPAND genCancelSaveBtns FOR this»
		</h:form>
		
	</ui:define> 
	
	«REM»comment
	«FOREACH getOutgoingAssociations() AS e»
	 <ui:include src="«e.type.getComponentFile("modalDlg")»"/> 
	«ENDFOREACH»
	«ENDREM»
</ui:composition>
«ENDFILE»

«ENDDEFINE»



«DEFINE genEditComponent FOR uml::Class»
	«FILE getWebPath() +"/" + "edit" + name+ "Component." + getExtension()»
	<ui:composition «EXPAND WebRoot::genIncludes-» >	
	
	<h:panelGroup  id="«"edit"»«name»ComponentPanel" >
	
		«setAsCurrentEntity(this)-»
		
		«EXPAND genAttribAsOutput FOR this-»
		<br/>
		«EXPAND genTable FOR this-»
		<br/>
		«EXPAND genManyToManyShuttle FOR this-»
	
	</h:panelGroup>
	
	</ui:composition>
	«ENDFILE»
«ENDDEFINE»




«DEFINE genCancelSaveBtns FOR uml::Class»
	 <div class="buttonBox"> 
        <h:commandButton value="Save" action="#{«getAction()».update}" />   
        <h:button value="Cancel" outcome="list«name»" />  
      </div> 
«ENDDEFINE»


«DEFINE genBusinessFunctionButtons FOR uml::Class»
	<div class="buttonBox">	
		«FOREACH getAllOperations() AS o»
		«IF o.hasStereo("UserOperation") »
			«IF o.hasUI»
			
			<h:commandButton value="«o.name»"  rendered="#{s:hasPermission('«asVar()»', '«o.name»', «getAction()».instance)  and  «getAction()».«o.name»Allowed }" 
				oncomplete="Richfaces.showModalPanel('«o.name»«name.toFirstUpper()»Mdl',{});"  />
	
			«ELSE»
			<h:commandButton value="«o.name»"  rendered="#{s:hasPermission('«asVar()»', '«o.name»', «getAction()».instance) and  «getAction()».«o.name»Allowed}" 
					action="#{«getAction()».«o.name»}" />
			«ENDIF»
		«ENDIF»
		«ENDFOREACH»
	</div>
«ENDDEFINE»


«DEFINE generateWebFunctionIncludes FOR wcprofile::Entity»
	«FOREACH getAllOperations() AS o»
		«IF o.hasStereo("UserOperation") && o.hasUI»
		<ui:include src="«getComponentViewFile("modalDlg" + o.name.toFirstUpper())»" >
				<ui:param name="modalId" value="«o.name»«name.toFirstUpper()»Mdl" />
		</ui:include>
		«EXPAND webFunctionModelDlg::gen(o) FOR this » 
		«ENDIF»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE genAttribAsOutput FOR uml::Class-»
	«IF !isCurrentMultiMode()»
	«IF getCurrentEmbeddable() == null»«EXPAND panelBegin FOR this»«ENDIF»
	«FOREACH allParents() AS e-»
	«EXPAND genLabelAndControl FOREACH e.getAllAttributes().select(a|!a.isMultivalued() && a.association == null) -»
	«ENDFOREACH»
	«EXPAND genLabelAndControl FOREACH getAllAttributes().select(a|!a.isMultivalued() && a.association == null) -»
	«ENDIF»
	
	«FOREACH allParents() AS e-»
	 «EXPAND genAttributeAssoc FOREACH e.getAllAttributes().select(a| !a.isMultivalued() && a.association != null && !a.isExpandableAssoc()) -»
	«ENDFOREACH»
	«EXPAND genAttributeAssoc FOREACH getAllAttributes().select(a| !a.isMultivalued() && a.association != null && !a.isExpandableAssoc() ) -»
	«IF getCurrentEmbeddable() == null»«EXPAND panelEnd FOR this»«ENDIF»
 «REM»expand the contained associations e.g contactDetails«ENDREM»
	«FOREACH allParents() AS e-»
		 «EXPAND genAttributeAssoc FOREACH e.getAllAttributes().select(a| !a.isMultivalued() && a.association != null && a.isExpandableAssoc()) -»
	«ENDFOREACH»
	«EXPAND genAttributeAssoc FOREACH getAllAttributes().select(a| !a.isMultivalued() && a.association != null && a.isExpandableAssoc() ) -»
	
	
	«IF isCurrentMultiMode()»
	«IF getCurrentEmbeddable() == null»«EXPAND panelBegin FOR this»«ENDIF»
	«FOREACH allParents() AS e-»
	«EXPAND genLabelAndControl FOREACH e.getAllAttributes().select(a|!a.isMultivalued() && a.association == null) -»
	«ENDFOREACH»
	«EXPAND genLabelAndControl FOREACH getAllAttributes().select(a|!a.isMultivalued() && a.association == null) -»
	«ENDIF»
	
«ENDDEFINE»

«REM»For multivalued attributes e.g. an order's order items«ENDREM»
«DEFINE genTable FOR uml::Class»
	«FOREACH allParents() AS e-»
		«EXPAND gentEditableTable FOREACH e.getComposed() -»
	«ENDFOREACH»
	«EXPAND gentEditableTable FOREACH getComposed() -»
«ENDDEFINE»


«DEFINE genManyToManyShuttle FOR uml::Class»
	«FOREACH allParents() AS e-»
		«EXPAND genEditManyToManyShuttle FOREACH e.getLeadingManyToMany() -»
	«ENDFOREACH»
	«EXPAND genEditManyToManyShuttle FOREACH getLeadingManyToMany() -»
«ENDDEFINE»

«DEFINE genEditManyToManyShuttle FOR uml::Property»
	<br/>
	«IF isCurrentEditMode()»
		  <p:pickList id="pickList" value="#{«class.getAction()».list«name.toFirstUpper()»}"  
                var="member"  
                itemLabel="#{member.displayName}"  
                itemValue="#{member}"
                converter="#{«type.name.toFirstLower()»Action.converter}"
             />  
	«ELSE»
	<p:simpleTogglePanel label="«msgBundleKey()»" switchType="client"  >
        <p:dataTable value="#{«class.getAction()».list«name.toFirstUpper()»}" var="item" >
        	<p:column> #{item.displayName} </p:column>
     	</p:dataTable>
     </p:simpleTogglePanel>
	«ENDIF»
«ENDDEFINE»




«DEFINE genAttributeAssoc FOR uml::Property -»
	«IF opposite.type.name != getCurrentEntity().name || !isCurrentMultiMode() »
		«IF isExpandableAssoc()  -»
			«IF getCurrentEmbeddable() == null» «EXPAND panelBegin FOR this.type» «ENDIF»
			«setCurrentEmbeddable()»
			«EXPAND genAttribAsOutput FOR this.type-»
			«clearCurrentEmbeddable()-»
			«EXPAND panelEnd FOR this.type»
		«ELSE»
			«clearCurrentEmbeddable()»
			«EXPAND genLabelAndControl FOR this-»
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE genLabelAndControl FOR uml::Property»
	«IF isCurrentEditMode()»
		«EXPAND genLabelAndInput FOR this-»
	«ELSE»
		«EXPAND genLabelAndOutput FOR this-»
	«ENDIF»
«ENDDEFINE»

«DEFINE genLabelAndInput FOR uml::Property-»
	«IF !isDerived() && !type.isEmbeddable() && !systemModify() && !currentUser()»
		«isCurrentMultiMode()?"<p:column><f:facet name=\"header\">" + getOutputMessage() + "</f:facet>": getOutputMessage()»
		«REM»comment<s:decorate id="«getId()»Decorate" template="/layout/edit.xhtml"> «!isCurrentMultiMode()?getOutputMessage():" "»  «ENDREM»
		«IF association != null-»
			«EXPAND genAssociation-»
		«ELSE»
			«EXPAND genPropertyEntry(type) FOR this-»
		«ENDIF»
		«REM»</s:decorate> «ENDREM»
		«isCurrentMultiMode()?"</p:column>":""»
	«ENDIF»
«ENDDEFINE»

«DEFINE genLabelAndOutput FOR uml::Property-»
	«IF !isSecret()  »
		«isCurrentMultiMode()?"<p:column><f:facet name=\"header\">":""»
		«getOutputMessage()-»
		«isCurrentMultiMode()?"</f:facet>":""»
		«IF association != null»
			«EXPAND genAssociation-»
		«ELSE»
			«EXPAND genPropertyEntry(type) FOR this-»
		«ENDIF»
		«getErrorMessageHolder()-»
		«isCurrentMultiMode()?"</p:column>":""»
	«ENDIF»
«ENDDEFINE»




«DEFINE genAssociation FOR uml::Property -»
	«IF !isCurrentEditMode()-»
		«EXPAND genAssocLink FOR this»
	«ELSE»
		«EXPAND genAssociationEdit FOR this»
	«ENDIF»
«ENDDEFINE»


«DEFINE panelBegin FOR uml::Class»
	«IF !isCurrentMultiMode()»
		<c:if test="${numColumns == null }" > <c:set var="numColumns" value="2" /> </c:if>
  		<h:panelGrid columns="${numColumns}" styleClass="«isCurrentEditMode()?"edit":"view"»Info" columnClasses="leftCol, rightCol"   rendered="#{ hidePanel«name» eq null}" >
  		<f:facet name="header"> 
			<h:outputText value="#{msg.«name»}"/> 
  		</f:facet>
  	«ENDIF»
«ENDDEFINE»

«DEFINE panelEnd FOR uml::Class»
	«IF !isCurrentMultiMode()»
		</h:panelGrid>
	«ENDIF»
«ENDDEFINE»

«DEFINE genAssocLink FOR uml::Property»
	<s:link «getEscape()»  value="#{«getActionForMode()»«genPropertyLabel()».displayName}"  
			action="view«name»" propagation="none">
			<f:param name="«name»Id" value="#{«getActionForMode()»«genPropertyLabel()».id}" />
			<f:param name="from" value="#{request.servletPath}" />
			«IF type.popupInfo != null»
			 <p:toolTip>
	            <span>
	              #{«getActionForMode()»«genPropertyLabel()».popupInfo} 
	            </span>
	        </p:toolTip>
	        «ENDIF»
	</s:link>
«ENDDEFINE»

«DEFINE genAssociationEdit FOR uml::Property»
	«IF (associationEnd.isColumn() && includeInAssociation   ) »
		«type.setCurrentEmbeddable()» 
		«EXPAND genLabelAndControl FOR this.type-»
	«ELSE»
		«IF (isColumn() && autocomplete == true) » 
			«EXPAND genAutoCompleteAssoc FOR this»
		«ELSE»
			«IF isPreloadedComposition()»
				«EXPAND genAssocLink FOR this»
			«ELSE»
				«EXPAND genDropDown FOR this»
			«ENDIF»
		«ENDIF»
	«REM»comment
	<a:commandButton oncomplete="Richfaces.showModalPanel('«type.name»ModalPanel',{});" value="Create" /> 
	<a:commandButton oncomplete="Richfaces.showModalPanel('«type.name»SelectModalPanel',{});" value="Choose" />
	«ENDREM» 
	«ENDIF»	
«ENDDEFINE»

«DEFINE genDropDown FOR uml::Property»
<h:panelGroup>
	<h:selectOneMenu converter="#{«type.asVar()»Action.converter}" id="«getId()»"  value="#{«getActionForMode()»«genPropertyLabel()-»}">
		<f:selectItem  itemLabel="Please Select ..." />  
		<f:selectItems value="#{«isColumn() && this.assocList != null ? assocList : type.asVar() + "Action.all"»}" 
		 var="«name»" itemLabel="#{«name».displayName}" />
	</h:selectOneMenu>
	<h:message for="«getId()»" styleClass="error"/>
</h:panelGroup>
«ENDDEFINE»



«DEFINE genAutoCompleteAssoc FOR uml::Property»
	<h:panelGroup>
	 <a:region>
	<h:inputText value="#{«getActionForMode()»«genPropertyLabel()-».displayName}" label="«msgBundleKey()»"  
		id="«getId()»" required="«!getAssocOptional()»"   />
	«EXPAND genSuggestionBox FOR this»
	 </a:region>
	</h:panelGroup>
«ENDDEFINE»

«DEFINE genSuggestionBox FOR uml::Property»
	<p:suggestionbox  for="«getId()»"  rules="all" suggestionAction="#{«type.asVar()»List.autocompletedb}"  ajaxSingle="true"
		  var="_result" fetchValue="#{_result.displayName}" minChars="2" nothingLabel="No Results found" zindex="99999">
		«IF type.autoCompleteColumns == null»
			<h:column>
				<h:outputText value="#{_result.displayName}" />
			</h:column>
		«ELSE»
		«FOREACH type.autoCompleteColumns.getAsList() AS e-»
			<h:column>
				<h:outputText value="#{_result.«e»}" />
			</h:column>
		«ENDFOREACH»
		«ENDIF»
						
		<a:support event="onselect">
			<f:setPropertyActionListener value="#{_result}"
				target="#{«getActionForMode()»«genPropertyLabel()-»}" />
		</a:support>
	</p:suggestionbox>
«ENDDEFINE»





«REM»Generate text control for the given property «ENDREM»
«DEFINE genPropertyEntry(uml::PrimitiveType cls) FOR uml::Property-»
	<h:panelGroup>
«IF isFile()-» 
	«EXPAND genFilePropertyEntry»
«ELSE-»
<«getTextControl()»  
	 «IF type.name == "largeText"»
	 	
	 «ENDIF»  
	 «IF isColumn() && secret»
	 	«IF isCurrentEditMode()»  redisplay="true" «ENDIF»
	 «ENDIF»  
	 «IF isType("Date")»  «ENDIF»
	 
	 id="«getId()»#{entityId}"  rendered="#{«isCurrentEditMode()?genEditPermission():genViewPermission()»}"  
	 «isCurrentEditMode()? " label=\"" + msgBundleKey() + "\"  required=\"" + getRequired() +"\"" + " disabled=\"" + getDisabled() + "\"" :""» 
	  value="#{«getActionForMode()»«genPropertyLabel()»}" >
	 «REM»comment«IF isCurrentEditMode()» «genAjaxValidator()» «ENDIF» «ENDREM»
</«getTextControl()»>
«ENDIF»	
		«REM»	<h:inputText id="«getId()»"  value="#{«getActionForMode()»«genPropertyLabel()»}"  /> «ENDREM»
			<h:message for="«getId()»" styleClass="error"/>
	</h:panelGroup>
«ENDDEFINE»




«DEFINE getFileView FOR uml::Property»
«LET isCurrentMultiMode()?"_" + getCurrentEntity().asVar() + "." + name: getFieldNameWithAction() AS currentFile»
«REM»comment
	<c:choose>
		<c:when test="${«currentFile».contentType.startsWith('image')}">
			<s:graphicImage value="#{«currentFile».data}" />
		</c:when>
		<c:otherwise>
			<s:link value="#{«currentFile».name}"  action="#{«class.getAction()».download«name.toFirstUpper()»(null)}" propagation="none" >
				<f:param name="currentEntityId" value="#{«class.getAction()».instance.id}" />
			</s:link>
		</c:otherwise>
	</c:choose>
	«ENDREM»
«ENDLET»
«ENDDEFINE»

«DEFINE genFilePropertyEntry FOR uml::Property-»
		<p:fileUpload id="«getId()»" 
			fileUploadListener="#{«getActionForFileMode()»«name»UploadListener}"
			mode="advanced" sizeLimit="500000">
		</p:fileUpload>
«ENDDEFINE»




«DEFINE genPropertyEntry(uml::Enumeration enm) FOR uml::Property-»
	<h:selectOneMenu id="«getId()»"  rendered="#{«genEditPermission()»}" value="#{«getActionForMode()»«genPropertyLabel()»}" required="«getRequired()»" 
	  label="«msgBundleKey()»">
		<f:selectItem itemLabel="Please Select..." itemValue="" />
		«FOREACH  enm.ownedLiteral AS e-»
		<f:selectItem itemValue="«e.name»"  itemLabel="#{msg.«e.name-»}" />
		«ENDFOREACH»
	</h:selectOneMenu>
«ENDDEFINE»



«DEFINE gentEditableTable FOR uml::Property-»
	«IF !isColumn() || (isColumn() &&  systemModifyOnly == false) »
	«setCurrentMultiMode(true)-»
	
	«IF isCurrentEditMode() && !isPreloadedComposition()  -» «EXPAND genNewButton FOR this» «ENDIF»
	<p:dataTable id="«name»" var="_«type.asVar()»" 
		«IF !isCurrentEditMode()» 
			rendered="#{not empty «class.getAction()».list«name.toFirstUpper()» and «genViewPermission()» }"
			«ELSE»
				rendered="#{«genEditPermission()»}"
		 «ENDIF»
				value="#{«class.getAction()».list«name.toFirstUpper()»}" 
				rowKeyVar="rowIndex" 
				rowClasses="odd, even" styleClass="viewInfo" rules="all">
		«setAsCurrentEntity(type)»
		«EXPAND genAttribAsOutput FOR type-»
		«IF isCurrentEditMode()  -»
		 «IF !isPreloadedComposition()»
		  «EXPAND genNew -»
		  «EXPAND genDelete FOR this -»
		 «ENDIF»
		«ENDIF»	
	</p:dataTable>
	«setCurrentMultiMode(false)-»
	«ENDIF»
«ENDDEFINE»

«DEFINE genDelete FOR uml::Property»
	<p:column>
		<h:commandButton value="Delete" immediate="true" action="#{«class.getAction()».delete«name.toFirstUpper()»(rowIndex)}"  
			reRender="«name»" >
			<f:param name="cid" value="#{javax.enterprise.context.conversation.id}"/>
		</h:commandButton>
	</p:column>
«ENDDEFINE»

«DEFINE genNew FOR uml::Property»
	<p:column>
		«EXPAND genNewButton FOR this»
	</p:column>
«ENDDEFINE»

«DEFINE genNewButton FOR uml::Property»
	<h:commandButton  value="New «name.toFirstUpper().getSingular()»" action="#{«class.getAction()».add«name.toFirstUpper()»}"  
		update="«name»"  rendered="#{«genEditPermission()»}" >
		 <f:param name="cid" value="#{javax.enterprise.context.conversation.id}"/>
	</h:commandButton>
«ENDDEFINE»

«DEFINE genProperty FOR String-»
	<h:outputText value="«msgBundleKey()-»" />
	<h:outputText value="#{«getCurrentEntity().asVar()».«this»«this == "createdByUser"?".displayName":""»}" />
«ENDDEFINE»


«DEFINE genTemplateChooser FOR uml::Class»
	 <h:outputText value="Template"/>  
        <h:selectOneMenu id="template" label="Template" value="#{«getAction()».entityTemplate}" required="false"> 
          <s:selectItems value="#{prescriptionAction.templateList}" var="itemIter" label="#{itemIter.displayName}" noSelectionLabel="Select Template"/>  
          <s:convertEntity/> 
          <a:support event="onchange"
							action="#{«getAction()».loadFromTemplate}"
							reRender="edit«name»ComponentPanel#{entityId}" ajaxSingle="true" >
				<s:conversationPropagation type="begin" />
		  </a:support> 
        </h:selectOneMenu>  
«ENDDEFINE»