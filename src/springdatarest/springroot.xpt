«IMPORT wcprofile»

«EXTENSION org::openarchitectureware::uml2::profile::profiling»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::associationExtensions»

«EXTENSION template::WebExtensions»`


«DEFINE Root FOR uml::Model»
	«EXPAND PackageRoot FOREACH allOwnedElements().typeSelect(uml::Package)»
	«EXPAND apicsv::Root FOR this»
	«EXPAND tests::Root FOR this»
«ENDDEFINE»

«DEFINE PackageRoot FOR uml::Package»
	«EXPAND BaseGen FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
	«EXPAND ProjectionGen FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
	
	«REM»
	«EXPAND BaseGen FOREACH allOwnedElements().typeSelect(wcprofile::MappedSuperClass)»
	«ENDREM»
	«EXPAND ManualGen FOREACH allOwnedElements().typeSelect(wcprofile::Entity)»
«ENDDEFINE»


«DEFINE ProjectionGen FOR wcprofile::Entity»
«FILE packagePath() +"/" + name + "CompleteProjectionBase.java"»
«REM»comment
	«EXPAND genOverwriteWarn FOR this»
	«ENDREM»
	
	package « packageName() »;
	«EXPAND genImports FOR this»
	import java.util.List;
	import org.springframework.data.rest.core.config.Projection;
	
	@Projection(name = "complete", types = { «name».class }) 
	interface «name»CompleteProjectionBase { 
		
		«EXPAND genPropertyProjection(this) FOREACH getMineAndParentsAttributes() -»
	
	}
«ENDFILE»
«ENDDEFINE»

«DEFINE genPropertyProjection(wcprofile::Entity  entity) FOR uml::Property»
	«IF !isMultivalued()»
		Optional<«type.fqn()»> get«name.toFirstUpper()»();
	«ELSE»
		List<«type.fqn()»>  get«name.toFirstUpper()»();
	«ENDIF»
«ENDDEFINE»


«DEFINE ManualGen FOR wcprofile::Entity»

«FILE getWebPackagePath("Repository")  man_path »
	package « getWebPackageName() »;
	
	«EXPAND genImports FOR this»
	
	@RepositoryRestResource
	public interface «name»Repository extends «name»RepositoryBase {
	
	//	@Override
	//	@PreAuthorize("@«asVar()»Repository.findOne(#id)?.createdByUser.userName == authentication?.name  ||  hasRole('admin')")         
		public /*Optional<«name»>*/ «name» findOne(@Param("id") Long id);
		
	//	@Override
	//	@PreAuthorize("#«asVar()»?.createdByUser.userName == authentication?.name  ||  hasRole('admin')")         
		public /*Optional<«name»>*/ «name»  save(@Param("«asVar()»")«name» «asVar()»);
		
		
		@Override
		//@PreAuthorize("@«asVar()»Repository.findOne(#id)?.createdByUser.userName == authentication?.name  ||  hasRole('admin')")         
		@PreAuthorize("hasRole('ROLE_ADMIN')")
		public void delete(@Param("«asVar()»")«name» «asVar()»);
		
		@Override
	//	@PreAuthorize("@«asVar()»Repository.findOne(#id)?.createdByUser.userName == authentication?.name  ||  hasRole('admin')")         
		void delete(@Param("id") Long id);
		
	}
	
	«REM»comment
package « getWebPackageName() »;

import « packageName() ».«name»;

«EXPAND genImports FOR this»


«FOREACH getMultiValued() AS a-»
import «a.type.fqn()»;
«ENDFOREACH»

public interface «name»Repository extends PagingAndSortingRepository<«name», Long> {
	
	«IF getAppliedStereotype("wcprofile::SystemUser") != null && defaultRole != null»
		public static final String DEFAULT_ROLE_NAME = "«defaultRole»"; 
	«ENDIF»
	
	«EXPAND genPropertySearch(this) FOREACH getMineAndParentsAttributes().select(a|!a.isMultivalued() ) -»
	
}
«ENDREM»
«ENDFILE»
«ENDDEFINE»


«DEFINE BaseGen FOR wcprofile::Entity»
	«IF isAbstract»
		«EXPAND AbstractGen FOR this»
	«ENDIF»
	«EXPAND BaseGenImpl FOR this»
«ENDDEFINE»




«DEFINE AbstractGen FOR wcprofile::Entity»
«FILE getWebPackagePath("RepositoryBase")   »
package « getWebPackageName() »;

import « packageName() ».«name»;

«ENDFILE»
«ENDDEFINE»

«DEFINE BaseGenImpl FOR wcprofile::Entity»
«FILE getWebPackagePath("RepositoryBase")   »
package « getWebPackageName() »;

import « packageName() ».«name»;

«EXPAND genImports FOR this»


«FOREACH getMultiValued() AS a-»
import «a.type.fqn()»;
«ENDFOREACH»

//@RepositoryRestResource(exported=false)
public interface «name»RepositoryBase extends PagingAndSortingRepository<«name», Long> {
	
	«IF getAppliedStereotype("wcprofile::SystemUser") != null && defaultRole != null»
		public static final String DEFAULT_ROLE_NAME = "«defaultRole»"; 
	«ENDIF»
	
	«EXPAND genPropertySearch(this) FOREACH getMineAndParentsAttributes().select(a|!a.isMultivalued() ) -»
	
}
«ENDFILE»
«ENDDEFINE»


«DEFINE genPropertySearch(wcprofile::Entity  entity) FOR uml::Property»
	«IF !isString()»
		«entity.getNeedsPaginationReturn(this)» findBy«name.toFirstUpper()»(@Param("«name»")  «type.fqn()» «name» «entity.getNeedsPagination(this)»);
	«ELSE»
		«entity.getNeedsPaginationReturn(this)» findBy«name.toFirstUpper()»ContainingAllIgnoringCase(@Param("«name»")  «type.fqn()» «name» «entity.getNeedsPagination(this)»);

		«entity.getNeedsPaginationReturn(this)» findBy«name.toFirstUpper()»(@Param("«name»") «type.fqn()» «name»  «entity.getNeedsPagination(this)»);
		«entity.getNeedsPaginationReturn(this)» findBy«name.toFirstUpper()»IgnoringCase(@Param("«name»") «type.fqn()» «name» «entity.getNeedsPagination(this)») ;
	«ENDIF»

«ENDDEFINE»


«DEFINE genImports FOR wcprofile::Entity»
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.repository.PagingAndSortingRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.data.rest.core.annotation.RepositoryRestResource;
import java.math.BigDecimal;
import java.util.Date;

import java.util.Optional;

import org.springframework.data.repository.query.Param;
import org.springframework.security.access.prepost.PreAuthorize;

import «fqn()»;
«ENDDEFINE»