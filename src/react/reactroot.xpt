
«EXTENSION angular2::angular2»
«EXTENSION template::GeneratorExtensions»
«EXTENSION template::webExtensions»
«EXTENSION template::associationExtensions»
«EXTENSION react::react»



«DEFINE Root FOR uml::Model»
	«EXPAND genRoutes::genRoutesFile FOR this»
	«EXPAND genComponent::gen FOREACH  allOwnedElements().typeSelect(wcprofile::Entity)»
«ENDDEFINE»
















«DEFINE Rootold FOR uml::Model»
	 «REM»comment«setAsCurrentEntity(this)-»«ENDREM»
	 «EXPAND genEntity FOREACH  allOwnedElements().typeSelect(wcprofile::Entity)»
	 
	 «FILE "clnt/" + "index"  + ".tsx"»
	 	 
	 	«EXPAND genImports FOREACH  allOwnedElements().typeSelect(wcprofile::Entity)»
	 	
	 	export const lookups = [«FOREACH  allOwnedElements().typeSelect(wcprofile::Entity) AS e SEPARATOR ','» '«e.name»' «ENDFOREACH»]
	 	
	 	«EXPAND genRoutes FOREACH allOwnedElements().typeSelect(wcprofile::EntitiesPackage)»
	 «ENDFILE»
	 
	 
	«EXPAND genNav FOR this»
	 
«ENDDEFINE»

«DEFINE genRouteLinks FOR wcprofile::EntitiesPackage»
  <h1> «name» </h1>
  <ul> 
  «FOREACH getOwnedTypes().typeSelect(wcprofile::Entity) AS e »
  <li><Link to="/admin/«e.name»List">«e.name»</Link></li>
   «ENDFOREACH»
   </ul>
   <hr/>
 «ENDDEFINE»
 
 «DEFINE genRoutes FOR wcprofile::EntitiesPackage»
  «EXPAND  routes FOREACH getOwnedTypes().typeSelect(wcprofile::Entity)»  
 «ENDDEFINE» 
 
 «DEFINE genNav FOR uml::Model»
  «FILE "clnt/" + "AdminView"  + ".tsx"»
	 import * as React from 'react';
	import * as ReactDOM from 'react-dom';
	import { Router, Route, hashHistory, Link  } from 'react-router'

export class AdminView extends React.Component<{}, {}> {
  render() {
    return (
      <div>
	 	«EXPAND genRouteLinks FOREACH allOwnedElements().typeSelect(wcprofile::EntitiesPackage)»
	  </div>
	 )}
}	 
 «ENDFILE»
 «ENDDEFINE»
 
 «DEFINE routes FOR wcprofile::Entity»
 <Route path="/admin/«name»List" component={«name»ListWrapper} />
 
 <Route path="/admin/«name»View/:id" component={«name»View} />

<Route path="/admin/«name»Edit" component={«name»Edit}>
    <Route path="/admin/«name»Edit/:id" component={«name»Edit} >
        <Route path="/admin/«name»Edit/:id/:parent" component={«name»Edit} />
    </Route>
</Route>
 «ENDDEFINE»
  
«DEFINE genImports FOR  wcprofile::Entity»
	import {«name»ListWrapper,«name»Edit,«name»View} from './admin/«name»List';
«ENDDEFINE»  

«DEFINE genEntity FOR wcprofile::Entity»
«FILE "clnt/" + name  + ".tsx"»

import * as React from 'react';
import * as ReactDOM from 'react-dom';

import BaseCrudComponent from '../commons/BaseComponent';
import AppState from '../commons/AppState';
import LookupService  from '../commons/LookupService';

«EXPAND genSchema FOR this»
«EXPAND genUISchema FOR this»
«EXPAND list::gen FOR this»

«EXPAND genHeaders FOR this»


export class «name»Store extends AppState {
    constructor(url: string, headers: any, formSchema: any, uiSchema: any) {
        super(url, headers, formSchema, uiSchema);
    }
}

export default class «name»Wrapper extends React.Component<any, any> {

    data = new «name»Store('«name.toFirstLower().getPlural()»', «name.toFirstLower()»Headers,
    createSchema(), «name.toFirstLower()»UISchema);

    render() {
        return (
            <BaseCrudComponent data={this.data} />
        );
    }
}

«ENDFILE»
«ENDDEFINE»


 «DEFINE genHeaders FOR wcprofile::Entity»
	export const «name.toFirstLower()»Headers = [
	 «FOREACH getMineAndParentsAttributes().select(a|!a.isMultivalued()) AS e SEPARATOR ','»
	 
	 {property:"«e.isAssoc() ? e.name + "_displayName" : e.name»",title:"«e.name.asLabel()»" }
	 «ENDFOREACH»     
	 ]
«ENDDEFINE»

 «DEFINE genSchema FOR wcprofile::Entity»
export function createSchema(){ 
 
 return {
    title: "«name.asLabel()»",
    type: "object",
    required: [ «EXPAND genRequired»],
    properties: {
    «EXPAND genProperty FOREACH getMineAndParentsAttributes().select(a|!a.isMVComposite())»
    «EXPAND genNested FOREACH getMineAndParentsAttributes().select(a|a.isMVComposite()) »
    }
 };

}
«ENDDEFINE»


«DEFINE genNested FOR uml::Property»
«name»: {
            title: "«name.asLabel()»",
            type: "array",
            required: [«EXPAND genRequired FOR type»],
            items: {
                "type": "object",
                "properties": {
                 «EXPAND genProperty FOREACH type.getMineAndParentsAttributes().select(a|!a.isMVComposite())» 
                 «EXPAND genNested FOREACH type.getMineAndParentsAttributes().select(a|a.isMVComposite()  && a.type != type) »
                }
            }
        },
«ENDDEFINE»




«DEFINE genProperty FOR uml::Property»
«IF this == class.getCompositionParent()»  «REM»composition parent to be treated differently «ENDREM»
«name»: {
      "type": "number",
    },
«ELSE»
«name»:{ type: "«getJsonType()»", title: "«name.asLabel()»", «EXPAND GenExtras(this) FOR type» «EXPAND genFormat(this) FOR type»},
«ENDIF»
«ENDDEFINE»



«DEFINE GenExtras(uml::Property p) FOR uml::Enumeration»  
'enum' : [
'',«FOREACH ownedLiteral AS e  ITERATOR iter SEPARATOR ','»'«iter.counter1 - 1»' «ENDFOREACH»  
],
'enumNames' : [
'Select',«FOREACH ownedLiteral AS e  ITERATOR iter SEPARATOR ','»'«e.name»' «ENDFOREACH»  
]
«ENDDEFINE»


«REM»For associations «ENDREM»
«DEFINE GenExtras(uml::Property p) FOR wcprofile::AbstractEntity»  
«IF !p.isManyToMany()»
	«EXPAND genLookups FOR p-»
«ENDIF»
«IF p.isLeadingManyToMany() -»
    "items":{
    	«EXPAND genLookups FOR p-»
    },
    "uniqueItems": true
«ENDIF»
«ENDDEFINE»

«DEFINE GenExtras(uml::Property p) FOR uml::Type-»  
«ENDDEFINE»

 «DEFINE genLookups FOR uml::Property-»
 'enum': LookupService.getLookup('«getTypeNamePlural()»').map(x => x.id « isLeadingManyToMany() ? ".toString()" : "" »  ),
 'enumNames': LookupService.getLookup('«getTypeNamePlural()»').map(x => x.displayName)
 «ENDDEFINE»
 
«DEFINE genRequired FOR wcprofile::Entity-»
«FOREACH getMineAndParentsAttributes().select(a|a.isRequired()) AS r SEPARATOR ','» '«r.name»' «ENDFOREACH»
«ENDDEFINE»

«DEFINE genUISchema FOR wcprofile::Entity-»
export const «name.toFirstLower()»UISchema = {
 	«EXPAND genPropertyUI FOREACH getMineAndParentsAttributes().select(a|!a.isMVComposite())»
    «EXPAND genNestedUI FOREACH getMineAndParentsAttributes().select(a|a.isMVComposite()) »
 }
«ENDDEFINE»

«DEFINE genFormat(uml::Property p) FOR uml::Type-»  
«IF !p.getFormat().isEmptyStr()» "format": "«p.getFormat()»"«ENDIF»	
«ENDDEFINE»



«DEFINE genPropertyUI FOR uml::Property»
«IF this == class.getCompositionParent()»  «REM»composition parent to be treated differently «ENDREM»
«name»: {
      "ui:widget": "hidden"
    },
«ELSE»
«name»: { «IF !getUIWidget().isEmptyStr()»'ui:widget': "«getUIWidget()»" ,«ENDIF» 'ui:placeholder': "«name.asLabel()»" },
«ENDIF»
«ENDDEFINE»

«DEFINE genNestedUI FOR uml::Property»
«name»: {
 	items:{
         «EXPAND genPropertyUI FOREACH type.getMineAndParentsAttributes().select(a|!a.isMVComposite())» 
         «EXPAND genNestedUI FOREACH type.getMineAndParentsAttributes().select(a|a.isMVComposite()  && a.type != type) »
     }
 },
«ENDDEFINE»

«DEFINE genRelatedImports FOR   wcprofile::Entity»
	«FOREACH getNonRecursiveOutgoingAssociations() AS e»
	//import {«e.type.name»Service} from '../«e.type.asVar()»/«e.type.name»Service'
	//import {«e.type.name»} from '../common/AppEntities';
	«ENDFOREACH»
«ENDDEFINE»


