«IMPORT wcprofile»


«EXTENSION template::GeneratorExtensions»
«EXTENSION template::webExtensions»
«EXTENSION template::associationExtensions»

«DEFINE Root FOR wcprofile::Entity»
	 «setAsCurrentEntity(this)-»
	 «EXPAND genEditContainer FOR this»
	 «EXPAND genEditComponent FOR this»
«ENDDEFINE»

«DEFINE genEditContainer FOR wcprofile::Entity»
«FILE getWebPath() +"/" + "edit" + name+ "." + getExtension() »
<ui:composition «EXPAND WebRoot::genIncludes-»
	template = "«getAdminTemplate()»" >	
	
	<ui:define name="content">
	
		<h:form>
			<h:panelGrid styleClass="editInfo" >
					<f:facet name="header">
						<h:outputText
							value="#{«getAction()».isNew() ? 'Create' : 'Edit'}  " />
					</f:facet>	
			«EXPAND genTemplateSelector FOR this»	
			
		
			<div id="printable" >
				<ui:include src="«getComponentViewFileCustomizable("edit")»" >
					<ui:param name="«asVar()»" value="#{«getAction()».instance}"/>
				</ui:include>
			</div>
			«EXPAND genCancelSaveBtns FOR this»
			</h:panelGrid>
		</h:form>
		
	</ui:define> 
	
	«REM»comment
	«FOREACH getOutgoingAssociations() AS e»
	 <ui:include src="«e.type.getComponentFile("modalDlg")»"/> 
	«ENDFOREACH»
	«ENDREM»
</ui:composition>
«ENDFILE»
«ENDDEFINE»

«DEFINE genTemplateSelector FOR wcprofile::Entity»
	«IF templatable && !isCurrentTemplateMode() »«EXPAND genTemplateChooser FOR this»«ENDIF»
		
	«IF isCurrentTemplateMode()»
	 <s:decorate id="templateNameDecorate" template="/layout/edit.xhtml"> 
      <ui:define name="label"> 
        <h:outputText value="#{msg.templateName}  " rendered="#{skipPermissionCheck == 'true' || s:hasPermission('prescription', 'notesEdit')}"/>
      </ui:define>  
      <h:inputText label="#{msg.templateName}"  value="#{«getAction()».templateName}" required="true"   /> 
    </s:decorate>
	«ENDIF»
«ENDDEFINE»


«DEFINE genEditComponent FOR wcprofile::Entity»
	«FILE getWebPath() +"/" + "edit"+ name+ "Component." + getExtension()»
	<ui:composition «EXPAND WebRoot::genIncludes-» >
	
	<h:panelGroup  id="edit«name»ComponentPanel" >
		«REM»<s:validateAll>«ENDREM»
		«setAsCurrentEntity(this)-»
		<h:panelGrid columns="1" styleClass="editInfo" columnClasses="leftCol, rightCol"    >	
		
		«EXPAND genPanelBegin FOR this»
		«EXPAND genPropertyRec FOREACH getMineAndParentsAttributes().select(a|!a.isMultivalued() && a.isAttributeEditable()  ) -»
		«EXPAND genPanelEnd FOR this»
		
		
		«EXPAND genEmbeddable FOREACH getMineAndParentsAttributes().select(a|!a.isMultivalued() && a.type.isEmbeddable()  ) -»
		
		
		<br/>
		«EXPAND genEditableTable FOREACH getMineAndParentsAttributes().select(a|a.isMVComposite()) -»
		<br/>
		«EXPAND genEditManyToManyShuttle FOREACH getMineAndParentsAttributes().select(a|a.isLeadingManyToMany() ) -»
		«REM»</s:validateAll>«ENDREM»
		</h:panelGrid>
	</h:panelGroup>
	
	</ui:composition>
	«ENDFILE»
«ENDDEFINE»

«DEFINE genEmbeddable FOR uml::Property»
	«setCurrentEmbeddable()-» 
	«EXPAND genPanelBegin FOR this.type»
	«EXPAND genPropertyRec FOREACH type.getMineAndParentsAttributes().select(a|!a.isMultivalued() && a.isAttributeEditable()  ) -»
	«EXPAND genPanelEnd FOR this.type»
	«clearCurrentEmbeddable()-»
«ENDDEFINE»

«DEFINE genEditableTable FOR uml::Property-»
		«setCurrentMultiMode(true)-»
		<p:panel rendered="#{ ! exclude«name.toFirstUpper()» == true}" >
		  «EXPAND genTableHeader FOR this»
		«IF !isPreloadedComposition() -» «EXPAND genNewButton FOR this» «ENDIF»
		<p:dataTable id="«name»" var="«type.asVar()»" tableStyle="width:auto" rendered="#{«genEditPermission()»}"
			value="#{«class.getAction()».list«name.toFirstUpper()»}" rowIndexVar="rowIndex">
			«setAsCurrentEntity(type)»
					
			«EXPAND genPropertyRec FOREACH type.getMineAndParentsAttributes().select(a|!a.isMultivalued() && 
				a.isAttributeEditable() && a.opposite != this ) -»
			
			«IF !isPreloadedComposition()»
			  «EXPAND genNew -»
			  «EXPAND genDelete FOR this -»
			«ENDIF»
				
		</p:dataTable>
		</p:panel>
		«setCurrentMultiMode(false)-»
«ENDDEFINE»


«DEFINE genPropertyRec FOR uml::Property-»
	«IF isExpandableAssoc() -» 
		«setCurrentEmbeddable()-» 
		«EXPAND genPropertyRec FOREACH type.getMineAndParentsAttributes().select(a|!a.isMultivalued() && a.isAttributeEditable()  ) -»
		«clearCurrentEmbeddable()-»
	«ELSE-»
		«EXPAND genProperty -»
	«ENDIF»
«ENDDEFINE»

	
«DEFINE genProperty FOR uml::Property-»
	 «EXPAND genInputBegin FOR this»
	 «EXPAND genLabel FOR this»
	 
	 <h:panelGroup>
	 «EXPAND genPropertyInput(type) FOR this»
	 «EXPAND genMessage FOR this»
	 </h:panelGroup>
	 
	 «EXPAND genInputEnd FOR this»
«ENDDEFINE»


«DEFINE genPropertyInput(uml::Enumeration enm) FOR uml::Property-»
	<h:selectOneMenu «EXPAND genCommonsForInput»   >
		<f:selectItem itemLabel="Please Select..." itemValue="" />
		«FOREACH  enm.ownedLiteral AS e-»
		<f:selectItem itemValue="«e.name»"  itemLabel="#{msg.«e.name-»}" />
		«ENDFOREACH»
	</h:selectOneMenu>
«ENDDEFINE»

«DEFINE genPropertyInput(wcprofile::Entity enm) FOR uml::Property-»
	«EXPAND genDropDown FOR this»
«ENDDEFINE»

«DEFINE genPropertyInput(uml::PrimitiveType cls) FOR uml::Property»
		«IF isFile()»
			<h2>TODO </h2>
		«ELSEIF isDate()»
           <p:calendar «EXPAND genCommonsForInput» navigator="true"   />
		«ELSEIF isBoolean()»
            <h:selectBooleanCheckbox «EXPAND genCommonsForInput» />		
		«ELSEIF isCurrency()»
			<pe:inputNumber «EXPAND genCommonsForInput»>
				<f:converter converterId="javax.faces.BigDecimal"/>
			</pe:inputNumber>
		«ELSEIF isDouble()»
			<h:inputText  «EXPAND genCommonsForInput»>
				<f:convertNumber pattern="000.00"/>
			</h:inputText>
		«ELSEIF isInteger()»
			<p:spinner size="2" min="0" «EXPAND genCommonsForInput»/>	
		«ELSEIF isLargeText()»
			<p:inputTextarea «EXPAND genCommonsForInput» cols="55" rows="5" maxlength="800" />
	 	«ELSE» «REM»String type «ENDREM»
	 		<p:inputText  «EXPAND genCommonsForInput»>
				«IF isNameType()»<f:converter  converterId="witchcraft.ui.jsf.capitalizeConverter"/>«ENDIF»
			</p:inputText>
		«ENDIF»
«ENDDEFINE»


«DEFINE genCommonsForInput FOR uml::Property»
	id="«getId()»"  label="«msgBundleKey()»" value="#{«genPropertyLabel()-»}" escape="false"
	required="«association != null ? (!getAssocOptional() && !isCurrentTemplateMode()) :getRequired()»"
		rendered="#{(«genEditPermission()») and !exclude«name.toFirstUpper()» == true}" disabled="#{disabled«name.toFirstUpper()» == true}"  
«ENDDEFINE»


«DEFINE genTableHeader FOR uml::Property»
	<f:facet name="header"> 
		<h:outputText value="#{msg.«class.name.toFirstLower() + "_" + name»}"/> 
	</f:facet>  
«ENDDEFINE»


«DEFINE genDropDown FOR uml::Property»
	<p:selectOneMenu converter="#{«type.asVar()»List.converter}" «EXPAND genCommonsForInput» >
		«IF isColumn() && this.controls != null » 
			«IF !isCurrentMultiMode()»   «REM»TODO: update=controls need to be id aware «ENDREM»
			<p:ajax  listener="#{«class.getAction()».onChange«name.toFirstUpper()»(«class.getAction()».instance)}" 
				 update=":#{p:component('«controls»')}"  resetValues="true"  />
			«ELSE» «REM»For multimode we need to send the variable «ENDREM»
			 <p:ajax  listener="#{«class.getAction()».onChange«name.toFirstUpper()»(_«class.asVar()»)}"  update=":#{p:component('«class.asVar()»s')}" resetValues="true"  >
			 	«REM»TODO: Replace with actual name of relationship «ENDREM»
				<s:conversationPropagation type="join" />
			  </p:ajax>
			«ENDIF»
		«ENDIF»
		<f:selectItem itemLabel="Select One" itemValue="" /> 
		
		<f:selectItems value="#{«isColumn() && this.assocList != null ? assocList : type.asVar() + "List.fetchAll()"»}" var="itemIter"
			itemLabel="#{itemIter.displayName}" itemValue="#{itemIter}"   />
		«genAjaxValidatorJSF2()»
	</p:selectOneMenu>
	 «REM»comment
	«EXPAND genSearchForAssoc FOR this»
	«ENDREM»
«ENDDEFINE»


«DEFINE genLabel FOR uml::Property»
	«IF !isCurrentMultiMode()»
	 	<p:outputLabel value="#{«msgBundleKeyOnly()»}" for="«getId()»" rendered="#{«getRendered()»}"/>	
	«ENDIF»
«ENDDEFINE»

«DEFINE genMessage FOR uml::Property»
	 <p:message for="«getId()»"/>
«ENDDEFINE»


«DEFINE genInputBegin FOR uml::Property»
	
	«IF isCurrentMultiMode()»
		<p:column><f:facet name="header"> «getOutputMessage()» </f:facet>
	«ELSE»
		 «REM»<div class="ui-grid-row">	«ENDREM»
	«ENDIF»
	
«ENDDEFINE»


«DEFINE genInputEnd FOR uml::Property»
	 «IF isCurrentMultiMode()»
		</p:column >
	 «ELSE»	
		«REM»</div>«ENDREM»
	«ENDIF»
«ENDDEFINE»








«DEFINE genEditManyToManyShuttle FOR uml::Property»
	<br/>
	«IF isCurrentEditMode()»
		«IF isAutoComplete()»
			<p:autoComplete minQueryLength="2" 
				completeMethod="#{«type.name.toFirstLower()»List.autocompletedb}"
				value="#{«class.getAction()».list«name.toFirstUpper()»}" converter="#{«type.name.toFirstLower()»List.converter}"
				var="record" itemLabel="#{record.displayName}" itemValue="#{record}"   multiple="true">
				<p:column>#{record.displayName}</p:column>
			</p:autoComplete>
		«ELSE»
		<p:panel toggleable="true" header="«msgBundleKey()»" switchType="client"  id="«name»">     
		     <p:pickList value="#{«class.getAction()».fetchListAvailable«name.toFirstUpper()»()}" var="member"
	    	 	itemLabel="#{member.displayName}" itemValue="#{member}" converter="#{«type.name.toFirstLower()»List.converter}"/>
	    </p:panel>
	    «ENDIF»
	«ELSE»
	<p:panel toggleable="true" header="«msgBundleKey()»" switchType="client"  >
        <p:dataTable value="#{«class.getAction()».list«name.toFirstUpper()»}" var="item" >
        	<p:column> #{item.displayName} </p:column>
     	</p:dataTable>
     </p:panel>
	«ENDIF»
«ENDDEFINE»


«DEFINE genFilePropertyEntry FOR uml::Property-»
     <h:panelGroup  rendered="#{«genEditPermission()»}"> 
          <h:outputText value="Current File:" /> <h:link value="#{«getActionForFileMode()»«class.asVar()-».«name».name}" id="«name»_file" 
          	action="#{«getActionForFileMode()»downloadFile(null)}" propagation="none"> 
              <f:param name="currentEntityId" value="#{«getActionForFileMode()»instance.id}" /> 
            </h:link> 
        «REM»TODO - harcoded PRODUCT «ENDREM»
        <p:fileUpload fileUploadListener="#{«getActionForFileMode()»«name»UploadListener}"  
        	value="#{productAction.product.image}" auto="true" />     
     </h:panelGroup>
«ENDDEFINE»


«DEFINE genNew FOR uml::Property»
	<p:column>
		«EXPAND genNewButton FOR this»
	</p:column>
«ENDDEFINE»

«DEFINE genNewButton FOR uml::Property»
	«REM»TODO -  edit«class.name.toFirstUpper()»ComponentPanel should be a function «ENDREM»
	<p:commandButton  action="#{«class.getAction()».add«name.toFirstUpper()»}" 
		update="«name», :#{p:component('edit«class.name.toFirstUpper()»ComponentPanel')}"  rendered="#{«genEditPermission()»}" 
		id="btnadd_«name»"  icon="ui-icon-plus"
		>
		<s:conversationId/>
	</p:commandButton>
«ENDDEFINE»

«DEFINE genDelete FOR uml::Property»
	<p:column>
		<p:commandButton immediate="true" action="#{«class.getAction()».delete«name.toFirstUpper()»(rowIndex)}"  
			update="«name»"  process="@this" id="btndelete_«name»"  icon="ui-icon-close">
			<s:conversationId/>
		</p:commandButton>
	</p:column>
«ENDDEFINE»


«DEFINE genCancelSaveBtns FOR uml::Class»
	<div class="buttonBox">
		<p:commandButton value="Save" update=":#{p:component('edit«name»Panel')}"   ajax="false"
			action="#{«getAction()».save«isCurrentTemplateMode()?"Template":"" »(true)}"   icon="fa fa-check-circle-o"  >
			<s:conversationId/>
		</p:commandButton>  
		<h:outputText value=" " /> 
		<p:commandButton value="Cancel" immediate="true"  ajax="false" action="#{«getAction()».cancel}" icon="fa fa-chevron-circle-left" >
		</p:commandButton>  
	</div>
«ENDDEFINE»


«DEFINE genPanelBegin FOR uml::Class»
	«IF !isCurrentMultiMode()»
		<c:if test="${numColumns == null }" > <c:set var="numColumns" value="4" /> </c:if>
  		<h:panelGrid columns="${numColumns}" styleClass="viewInfo" columnClasses="leftCol, rightCol">
  		<f:facet name="header"> 
			<h:outputText value="#{msg.«name»}"/> 
  		</f:facet>
  	«ENDIF»
«ENDDEFINE»

«DEFINE genPanelEnd FOR uml::Class»
	«IF !isCurrentMultiMode()»
		</h:panelGrid>
	«ENDIF»
«ENDDEFINE»

